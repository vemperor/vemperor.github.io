<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ru"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://ivalentinee.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ivalentinee.github.io/" rel="alternate" type="text/html" hreflang="ru" /><updated>2021-06-30T12:41:44+00:00</updated><id>https://ivalentinee.github.io/feed.xml</id><title type="html">ivalentinee</title><entry xml:lang="en"><title type="html">:ssl and :httpc in Erlang/Elixir</title><link href="https://ivalentinee.github.io/en/programming/2021/03/22/erlang-ssl.html" rel="alternate" type="text/html" title=":ssl and :httpc in Erlang/Elixir" /><published>2021-03-22T00:00:00+00:00</published><updated>2021-03-22T00:00:00+00:00</updated><id>https://ivalentinee.github.io/en/programming/2021/03/22/erlang-ssl</id><content type="html" xml:base="https://ivalentinee.github.io/en/programming/2021/03/22/erlang-ssl.html">&lt;h2 id=&quot;source&quot;&gt;Source&lt;/h2&gt;

&lt;p&gt;This text is a short (very) summary on &lt;a href=&quot;https://youtu.be/0jzcPnsE4nQ&quot;&gt;ElixirConfEU 2019 speech about ssl in Erlang&lt;/a&gt; from &lt;a href=&quot;https://twitter.com/voltonez&quot;&gt;Bram Verburg&lt;/a&gt;. More to have copy-paste code than to explain anything.&lt;/p&gt;

&lt;p&gt;To get a proper explanation on that topic I highly recommend watching the video.&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Problem is, Erlang &lt;code class=&quot;highlighter-rouge&quot;&gt;:ssl&lt;/code&gt; is somewhat complicated. Especially for guys like me who knows almost nothing about SSL/TLS.&lt;/p&gt;

&lt;p&gt;By default &lt;code class=&quot;highlighter-rouge&quot;&gt;:ssl&lt;/code&gt; (and &lt;code class=&quot;highlighter-rouge&quot;&gt;:httpc&lt;/code&gt;) supports TLS connection (successfully connects to TLS hosts) but does not make so securely, because it does not perform server authenticity check. Default options look (somewhat) like this: &lt;code class=&quot;highlighter-rouge&quot;&gt;[ssl: [verify: :verify_none]]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want (like me) to perform secure http requests default options do not work.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;First, turn on authenticity check:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;ss&quot;&gt;verify:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_peer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then configure cert file. Ubuntu with &lt;code class=&quot;highlighter-rouge&quot;&gt;openssl&lt;/code&gt; installed have them at &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssl/certs/ca-certificates.crt&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;ss&quot;&gt;cacertfile:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/etc/ssl/certs/ca-certificates.crt'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, to enable wildcard sertificates we should specify custom (somewhat) hostname check function:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;ss&quot;&gt;customize_hostname_check:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;match_fun:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:public_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkix_verify_hostname_match_fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And finally, if you need to connect to an old server with outdated algorithms these algorightms should be enabled:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;ss&quot;&gt;ciphers:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ssl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cipher_suites&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:&quot;tlsv1.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Resulting config looks like this (without &lt;code class=&quot;highlighter-rouge&quot;&gt;ciphers&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;verify:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_peer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;cacertfile:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/etc/ssl/certs/ca-certificates.crt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;customize_hostname_check:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;match_fun:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:public_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkix_verify_hostname_match_fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And some code with &lt;code class=&quot;highlighter-rouge&quot;&gt;:httpc&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ssl_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;verify:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_peer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;cacertfile:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/etc/ssl/certs/ca-certificates.crt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;customize_hostname_check:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;match_fun:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:public_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkix_verify_hostname_match_fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;connection_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ssl:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssl_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://www.google.com:443/'&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:httpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;storing-configuration&quot;&gt;Storing configuration&lt;/h2&gt;
&lt;p&gt;Sometimes it’s important to be able to turn server authenticity check off, because insecurely running program is less of an issue than not running at all. In that case there has to be a way to turn it off &lt;a href=&quot;/en/programming/2019/09/14/exploitation-first.html&quot;&gt;without rewriting the program&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I prefer to have a separate module for &lt;code class=&quot;highlighter-rouge&quot;&gt;:ssl&lt;/code&gt; options which gets configuration from ENV and saves it in &lt;a href=&quot;https://erlang.org/doc/man/persistent_term.html&quot;&gt;persistent_term&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTPCSSLOptions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get_stored&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_from_env!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_stored&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:persistent_term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_from_env!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:verify_none&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify_none_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:verify_peer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify_peer_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;ss&quot;&gt;:persistent_term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify_type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:my_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;verify_none&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_none&lt;/span&gt;
      &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;verify_peer&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_peer&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_peer&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify_none_options&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;verify:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify_peer_options&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cacertfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:my_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:casertfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;verify:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_peer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;cacertfile:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_charlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacertfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;customize_hostname_check:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;match_fun:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:public_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkix_verify_hostname_match_fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And then use that module:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://www.google.com:443/'&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:httpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ssl:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTPCSSLOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Source This text is a short (very) summary on ElixirConfEU 2019 speech about ssl in Erlang from Bram Verburg. More to have copy-paste code than to explain anything. To get a proper explanation on that topic I highly recommend watching the video. Problem Problem is, Erlang :ssl is somewhat complicated. Especially for guys like me who knows almost nothing about SSL/TLS. By default :ssl (and :httpc) supports TLS connection (successfully connects to TLS hosts) but does not make so securely, because it does not perform server authenticity check. Default options look (somewhat) like this: [ssl: [verify: :verify_none]]. If you want (like me) to perform secure http requests default options do not work. Solution First, turn on authenticity check: verify: :verify_peer Then configure cert file. Ubuntu with openssl installed have them at /etc/ssl/certs/ca-certificates.crt: cacertfile: '/etc/ssl/certs/ca-certificates.crt' Next, to enable wildcard sertificates we should specify custom (somewhat) hostname check function: customize_hostname_check: [ match_fun: :public_key.pkix_verify_hostname_match_fun(:https) ] And finally, if you need to connect to an old server with outdated algorithms these algorightms should be enabled: ciphers: :ssl.cipher_suites(:all, :&quot;tlsv1.2&quot;) Resulting config looks like this (without ciphers): [ verify: :verify_peer, cacertfile: '/etc/ssl/certs/ca-certificates.crt', customize_hostname_check: [ match_fun: :public_key.pkix_verify_hostname_match_fun(:https) ] ] And some code with :httpc: ssl_options = [ verify: :verify_peer, cacertfile: '/etc/ssl/certs/ca-certificates.crt', customize_hostname_check: [ match_fun: :public_key.pkix_verify_hostname_match_fun(:https) ] ] connection_options = [ssl: ssl_options] url = 'https://www.google.com:443/' :httpc.request(:get, {url, []}, connection_options, []) Storing configuration Sometimes it’s important to be able to turn server authenticity check off, because insecurely running program is less of an issue than not running at all. In that case there has to be a way to turn it off without rewriting the program. I prefer to have a separate module for :ssl options which gets configuration from ENV and saves it in persistent_term: defmodule MyApp.HTTPCSSLOptions do def get do get_stored() || get_from_env!() end defp get_stored do :persistent_term.get(__MODULE__, nil) end defp get_from_env! do options = case verify_type() do :verify_none -&amp;gt; verify_none_options() :verify_peer -&amp;gt; verify_peer_options() end :persistent_term.put(__MODULE__, options) options end defp verify_type do case String.downcase(Application.get_env(:my_app, :ssl)[:verify]) do &quot;verify_none&quot; -&amp;gt; :verify_none &quot;verify_peer&quot; -&amp;gt; :verify_peer _ -&amp;gt; :verify_peer end end defp verify_none_options do [verify: :verify_none] end defp verify_peer_options do cacertfile = Application.get_env(:my_app, :ssl)[:casertfile] [ verify: :verify_peer, cacertfile: to_charlist(cacertfile), customize_hostname_check: [ match_fun: :public_key.pkix_verify_hostname_match_fun(:https) ] ] end end And then use that module: url = 'https://www.google.com:443/' :httpc.request(:get, {url, []}, [ssl: MyApp.HTTPCSSLOptions.get()], [])</summary></entry><entry xml:lang="ru"><title type="html">:ssl и :httpc в Erlang/Elixir</title><link href="https://ivalentinee.github.io/ru/programming/2021/03/22/erlang-ssl.html" rel="alternate" type="text/html" title=":ssl и :httpc в Erlang/Elixir" /><published>2021-03-22T00:00:00+00:00</published><updated>2021-03-22T00:00:00+00:00</updated><id>https://ivalentinee.github.io/ru/programming/2021/03/22/erlang-ssl</id><content type="html" xml:base="https://ivalentinee.github.io/ru/programming/2021/03/22/erlang-ssl.html">&lt;h2 id=&quot;источник&quot;&gt;Источник&lt;/h2&gt;

&lt;p&gt;Эта статья — краткий (очень) конспект &lt;a href=&quot;https://youtu.be/0jzcPnsE4nQ&quot;&gt;доклада про ssl с ElixirConfEU 2019&lt;/a&gt; от &lt;a href=&quot;https://twitter.com/voltonez&quot;&gt;Bram Verburg&lt;/a&gt;. Не столько для объяснения, сколько для копирования кода.&lt;/p&gt;

&lt;p&gt;Для полноценного изучения вопроса крайне рекомендую посмотреть сам доклад.&lt;/p&gt;

&lt;h2 id=&quot;проблема&quot;&gt;Проблема&lt;/h2&gt;
&lt;p&gt;В том, что ssl в Erlang — скользкая тема (для тех, кто не шарит, т.е. для меня).&lt;/p&gt;

&lt;p&gt;По-умолчанию &lt;code class=&quot;highlighter-rouge&quot;&gt;:ssl&lt;/code&gt; (и, соответственно, &lt;code class=&quot;highlighter-rouge&quot;&gt;:httpc&lt;/code&gt;) поддерживают tls (то есть не выдают ошибку при подключении к tls-хостам), но не обеспечивают безопасность соединения, так как не выполняют проверку аутентичности сервера. Опции по-умолчанию выглядят так: &lt;code class=&quot;highlighter-rouge&quot;&gt;[ssl: [verify: :verify_none]]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Если вам (как мне) нужно ходить на сервер, аутентичность которого лучше бы подтверждать, опции по-умолчанию не подходят.&lt;/p&gt;

&lt;h2 id=&quot;решение&quot;&gt;Решение&lt;/h2&gt;
&lt;p&gt;Для начала нужно влючить проверку подлинности сервера:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;ss&quot;&gt;verify:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_peer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Затем указать файл с сертификатами опцией &lt;code class=&quot;highlighter-rouge&quot;&gt;cacertfile&lt;/code&gt;. В Ubuntu при установленном пакете &lt;code class=&quot;highlighter-rouge&quot;&gt;openssl&lt;/code&gt; сертификаты лежат в &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ssl/certs/ca-certificates.crt&lt;/code&gt;. Получаем&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;ss&quot;&gt;cacertfile:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/etc/ssl/certs/ca-certificates.crt'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Далее для возможности работы с wildcard-сертификатами нужно указать функцию проверки доменного имени подходящую для https:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;ss&quot;&gt;customize_hostname_check:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;match_fun:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:public_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkix_verify_hostname_match_fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Если нужно обращаться к старому серверу, который по какой-то причине работает со старыми алгоритмами, нужно эти алгоритмы включить:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;ss&quot;&gt;ciphers:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ssl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cipher_suites&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:&quot;tlsv1.2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;В результате получаем следующую конфигурацию (без &lt;code class=&quot;highlighter-rouge&quot;&gt;ciphers&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;verify:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_peer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;cacertfile:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/etc/ssl/certs/ca-certificates.crt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;customize_hostname_check:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;match_fun:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:public_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkix_verify_hostname_match_fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;И финальный код с &lt;code class=&quot;highlighter-rouge&quot;&gt;:httpc&lt;/code&gt; выглядит примерно вот так:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ssl_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;verify:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_peer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;cacertfile:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/etc/ssl/certs/ca-certificates.crt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;customize_hostname_check:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;match_fun:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:public_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkix_verify_hostname_match_fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;connection_options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ssl:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssl_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://www.google.com:443/'&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:httpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;сохраняем-конфигурацию&quot;&gt;Сохраняем конфигурацию&lt;/h2&gt;
&lt;p&gt;Часто так бывает, что из-за каких-то проблем нужно включить &lt;code class=&quot;highlighter-rouge&quot;&gt;verify_none&lt;/code&gt;. Например, небезопасная работа приложения принесёт меньше бед, чем неработоспособное приложение. В таком случае нужна возможность &lt;a href=&quot;/ru/programming/2020/11/02/exploitation-first.html&quot;&gt;управлять подключением без внесения изменений в программу&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Я предпочитаю для такого делать отдельный модуль, который для ускорения работы сохраняет настройки в &lt;a href=&quot;https://erlang.org/doc/man/persistent_term.html&quot;&gt;persistent_term&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTPCSSLOptions&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get_stored&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_from_env!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_stored&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;ss&quot;&gt;:persistent_term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_from_env!&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:verify_none&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify_none_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:verify_peer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify_peer_options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;ss&quot;&gt;:persistent_term&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify_type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:my_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:verify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;verify_none&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_none&lt;/span&gt;
      &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;verify_peer&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_peer&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_peer&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify_none_options&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;verify:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verify_peer_options&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cacertfile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:my_app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ssl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:casertfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;verify:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:verify_peer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;cacertfile:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_charlist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cacertfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;customize_hostname_check:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;match_fun:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:public_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pkix_verify_hostname_match_fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:https&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;И затем использовать этот модуль:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://www.google.com:443/'&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;:httpc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;ssl:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTTPCSSLOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Источник Эта статья — краткий (очень) конспект доклада про ssl с ElixirConfEU 2019 от Bram Verburg. Не столько для объяснения, сколько для копирования кода. Для полноценного изучения вопроса крайне рекомендую посмотреть сам доклад. Проблема В том, что ssl в Erlang — скользкая тема (для тех, кто не шарит, т.е. для меня). По-умолчанию :ssl (и, соответственно, :httpc) поддерживают tls (то есть не выдают ошибку при подключении к tls-хостам), но не обеспечивают безопасность соединения, так как не выполняют проверку аутентичности сервера. Опции по-умолчанию выглядят так: [ssl: [verify: :verify_none]]. Если вам (как мне) нужно ходить на сервер, аутентичность которого лучше бы подтверждать, опции по-умолчанию не подходят. Решение Для начала нужно влючить проверку подлинности сервера: verify: :verify_peer Затем указать файл с сертификатами опцией cacertfile. В Ubuntu при установленном пакете openssl сертификаты лежат в /etc/ssl/certs/ca-certificates.crt. Получаем cacertfile: '/etc/ssl/certs/ca-certificates.crt' Далее для возможности работы с wildcard-сертификатами нужно указать функцию проверки доменного имени подходящую для https: customize_hostname_check: [ match_fun: :public_key.pkix_verify_hostname_match_fun(:https) ] Если нужно обращаться к старому серверу, который по какой-то причине работает со старыми алгоритмами, нужно эти алгоритмы включить: ciphers: :ssl.cipher_suites(:all, :&quot;tlsv1.2&quot;) В результате получаем следующую конфигурацию (без ciphers): [ verify: :verify_peer, cacertfile: '/etc/ssl/certs/ca-certificates.crt', customize_hostname_check: [ match_fun: :public_key.pkix_verify_hostname_match_fun(:https) ] ] И финальный код с :httpc выглядит примерно вот так: ssl_options = [ verify: :verify_peer, cacertfile: '/etc/ssl/certs/ca-certificates.crt', customize_hostname_check: [ match_fun: :public_key.pkix_verify_hostname_match_fun(:https) ] ] connection_options = [ssl: ssl_options] url = 'https://www.google.com:443/' :httpc.request(:get, {url, []}, connection_options, []) Сохраняем конфигурацию Часто так бывает, что из-за каких-то проблем нужно включить verify_none. Например, небезопасная работа приложения принесёт меньше бед, чем неработоспособное приложение. В таком случае нужна возможность управлять подключением без внесения изменений в программу. Я предпочитаю для такого делать отдельный модуль, который для ускорения работы сохраняет настройки в persistent_term: defmodule MyApp.HTTPCSSLOptions do def get do get_stored() || get_from_env!() end defp get_stored do :persistent_term.get(__MODULE__, nil) end defp get_from_env! do options = case verify_type() do :verify_none -&amp;gt; verify_none_options() :verify_peer -&amp;gt; verify_peer_options() end :persistent_term.put(__MODULE__, options) options end defp verify_type do case String.downcase(Application.get_env(:my_app, :ssl)[:verify]) do &quot;verify_none&quot; -&amp;gt; :verify_none &quot;verify_peer&quot; -&amp;gt; :verify_peer _ -&amp;gt; :verify_peer end end defp verify_none_options do [verify: :verify_none] end defp verify_peer_options do cacertfile = Application.get_env(:my_app, :ssl)[:casertfile] [ verify: :verify_peer, cacertfile: to_charlist(cacertfile), customize_hostname_check: [ match_fun: :public_key.pkix_verify_hostname_match_fun(:https) ] ] end end И затем использовать этот модуль: url = 'https://www.google.com:443/' :httpc.request(:get, {url, []}, [ssl: MyApp.HTTPCSSLOptions.get()], [])</summary></entry><entry xml:lang="ru"><title type="html">Эксплуатация прежде всего</title><link href="https://ivalentinee.github.io/ru/programming/2020/11/02/exploitation-first.html" rel="alternate" type="text/html" title="Эксплуатация прежде всего" /><published>2020-11-02T00:00:00+00:00</published><updated>2020-11-02T00:00:00+00:00</updated><id>https://ivalentinee.github.io/ru/programming/2020/11/02/exploitation-first</id><content type="html" xml:base="https://ivalentinee.github.io/ru/programming/2020/11/02/exploitation-first.html">&lt;h2 id=&quot;введение&quot;&gt;Введение&lt;/h2&gt;

&lt;p&gt;Этот пост написан в основном для тех &lt;a href=&quot;https://youtu.be/izGwDsrQ1eQ&quot;&gt;беспечных&lt;/a&gt; разработчиков, которые пишут код без учёта эксплуатации.&lt;/p&gt;

&lt;p&gt;Что такое &lt;strong&gt;эксплуатация&lt;/strong&gt;? &lt;a href=&quot;https://ru.wiktionary.org/wiki/%D1%8D%D0%BA%D1%81%D0%BF%D0%BB%D1%83%D0%B0%D1%82%D0%B0%D1%86%D0%B8%D1%8F&quot;&gt;Вики определяет эксплуатацию&lt;/a&gt; как “использование чего-либо”. Как используются программы? Их устанавливают, конфигурируют, после чего убеждаются в корректности работы в соответствии с инструкцией.&lt;/p&gt;

&lt;p&gt;Чтобы сделать программу эксплуатируемой необходимо предоставить документацию для всех этих процессов.&lt;/p&gt;

&lt;p&gt;По правде говоря, проекты (а иногда даже продукты) редко сопровождаются хотя бы какой-то документацией, не говоря уже про документацию по эксплуатации. Подход “Это как-то работает”, “просто перезапусти”, вот это всё.&lt;/p&gt;

&lt;p&gt;Поэтому я попытаюсь объяснить, как сделать веб-сервисы эксплуатируемыми. Есть &lt;a href=&quot;https://12factor.net/&quot;&gt;один достаточно известный ресурс&lt;/a&gt; по этой теме, который более обширный и формальный, чем моя статья.&lt;/p&gt;

&lt;h2 id=&quot;стандартизируй&quot;&gt;Стандартизируй!&lt;/h2&gt;

&lt;p&gt;Под этим я имею ввиду две вещи.&lt;/p&gt;

&lt;h3 id=&quot;сделай-стандарт-документации-по-эксплуатации&quot;&gt;Сделай стандарт документации по эксплуатации&lt;/h3&gt;
&lt;p&gt;Во-первых, спроси своих коллег из отдела эксплуатации (админов). Особенно если уже есть какие-то сервисы в эксплуатации. Что они используют? Какой информации им не хватает?&lt;/p&gt;

&lt;p&gt;Во-вторых, изучи свои проекты (и уже в эксплуатации и в ранней разработке). Подумай обо всех местах, которые могут быть сконфигурированы, о ситуациях, которые могут случиться. Думаешь, твою систему так легко понять? Я разочарую: совсем нет.&lt;/p&gt;

&lt;p&gt;После сбора общей информации нужно написать шаблон документации по эксплуатации и всем его показать, обсудить, затем улучшить.&lt;/p&gt;

&lt;p&gt;При этом нельзя относиться к получившемуся шаблону как к чему-то неизменному. После всех инцедентов (особенно пост-мортемов) необходимо подумать, нет нужно ли добавить (или убрать) чего-то из шаблона, чтобы, обладая документацией команда эксплуатации смогла сама восстановить работу сервиса.&lt;/p&gt;

&lt;h3 id=&quot;сделай-процесс-документирования-обязательным-для-всех-разработчиков&quot;&gt;Сделай процесс документирования обязательным для всех разработчиков&lt;/h3&gt;
&lt;p&gt;С этим немного сложнее. Если ты — тимлид или старший разработчик, то используй свою власть чтобы сделать документирование эксплуатации обязательной. Если ты рядовой сотрудник — используй техники убеждения &lt;del&gt;социальную инженерию&lt;/del&gt;, меритократические наклонности, своего начальника, свою репутацию, веди себя как полная скотина, но заставь всех писать документацию по эксплуатации. Просто поверь мне, это спасёт тебя лично от бессонных ночей (особенно если ты тимлид или менеджер).&lt;/p&gt;

&lt;h2 id=&quot;сделай-свою-систему-эксплуатируемой&quot;&gt;Сделай свою систему эксплуатируемой&lt;/h2&gt;
&lt;p&gt;Это тоже непросто. Всё вот это добро из &lt;a href=&quot;https://12factor.net/&quot;&gt;12-factor&lt;/a&gt; — это сюда.&lt;/p&gt;

&lt;h3 id=&quot;env-конфиги-проекта&quot;&gt;ENV-конфиги проекта&lt;/h3&gt;
&lt;p&gt;Это то, что я видел очень много раз. И каждый раз я старался от этого избавиться. Если в папке &lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt; есть что-то кроме &lt;code class=&quot;highlighter-rouge&quot;&gt;production&lt;/code&gt;- и &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;-конфигов, всё плохо.&lt;/p&gt;

&lt;p&gt;Просто представь, в час ночи сервер БД падает без шансов на восстановление, но у админов есть реплика, на которую можно переключиться очень быстро (в пределах &lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%A1%D0%BE%D0%B3%D0%BB%D0%B0%D1%88%D0%B5%D0%BD%D0%B8%D0%B5_%D0%BE%D0%B1_%D1%83%D1%80%D0%BE%D0%B2%D0%BD%D0%B5_%D1%83%D1%81%D0%BB%D1%83%D0%B3&quot;&gt;SLA&lt;/a&gt;) просто поменяв IP-адрес (или доменное имя) БД в приложении. Но с хардкодом в &lt;code class=&quot;highlighter-rouge&quot;&gt;production&lt;/code&gt;-конфиге это делается только через изменение кода и редеплой приложения. И вот она, бессонная ночь. И не одна.&lt;/p&gt;

&lt;p&gt;Поэтому, чтобы сделать систему конфигурироемой “находу”, нужен либо config-provider, либо просто получение значений из ENV-переменных (со значениями по-умолчанию). Это уже добавит достаточно много сна в беспокойную жизнь разработчика.&lt;/p&gt;

&lt;p&gt;И конечно, документирование конфигурации (ENV-переменных или config-provider’ов) очень даже стоит документировать. Поверь мне.&lt;/p&gt;

&lt;h3 id=&quot;добавь-проверки-запущенности-readiness-и-работоспособности-liveness&quot;&gt;Добавь проверки запущенности (&lt;em&gt;readiness&lt;/em&gt;) и работоспособности (&lt;em&gt;liveness&lt;/em&gt;)&lt;/h3&gt;
&lt;p&gt;Или, как некоторые их называют, хелсчеки. Я не про &lt;a href=&quot;https://twitter.com/memenetes&quot;&gt;кубернетисы&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Зачем? Админам желательно знать, когда приложение уже запустилось (&lt;em&gt;readiness&lt;/em&gt;) и когда оно упало (&lt;em&gt;liveness&lt;/em&gt;).
Обычно веб-приложениям хватает ответа &lt;code class=&quot;highlighter-rouge&quot;&gt;200 OK&lt;/code&gt; на запрос &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; для обеих проверок.&lt;/p&gt;

&lt;p&gt;И затем опиши это всё в документации.&lt;/p&gt;

&lt;h3 id=&quot;сделай-кастомный-endpoint-для-мониторинга&quot;&gt;Сделай кастомный endpoint для мониторинга&lt;/h3&gt;
&lt;p&gt;Фишка в том, что скорее всего у админов уже есть какой-то инструмент мониторинга. Нет ничего плохого в том, чтобы помочь им.&lt;/p&gt;

&lt;p&gt;Есть подозрения, что какая-то ошибка может проявиться? Отправляй их в мониторинг. Есть внешние системы? Проверяй к ним доступ.&lt;/p&gt;

&lt;p&gt;Мы (на тех проектах, которые я разрабатывал) использовали &lt;code class=&quot;highlighter-rouge&quot;&gt;/healthcheck&lt;/code&gt; с примерно следующим содержимым:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db ok
smtp ok
rabbitmq ok
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;И опиши это в &lt;strong&gt;документации по эксплуатации&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;опиши-все-сервисы&quot;&gt;Опиши все сервисы&lt;/h3&gt;
&lt;p&gt;Используешь СУБД? Веб-сервер? Отправляешь email’ы? Опиши!&lt;/p&gt;

&lt;p&gt;Для каждого описываемого сервиса нужно описать:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Откуда брать. Сборка кода? Docker? RPM-пакеты?&lt;/li&gt;
  &lt;li&gt;Как запустить: команды, аргументы, флаги, вот это всё.&lt;/li&gt;
  &lt;li&gt;Что сделать при первом старте. Например, импортировать какие-то данные “по-умолчанию” (возможно специальной командой).&lt;/li&gt;
  &lt;li&gt;Зависимости. Не думаю, что есть смысл запускать сервер приложения до запуска СУБД.&lt;/li&gt;
  &lt;li&gt;Масштабируемость. Веб-сервер достаточно легко (авто)масштабируется. А вот с масштабированием СУБД обычно всё не так хорошо.&lt;/li&gt;
  &lt;li&gt;Требуемые ресурсы для работы. Память, процессор, диски, сокеты, inode’ы.&lt;/li&gt;
  &lt;li&gt;Бэкапы. Что, как и когда нужно бэкапить и как это нужно восстанавливать.&lt;/li&gt;
  &lt;li&gt;Зачем нужен этот сервис. Что именно он делает. Это поможет понять, можно ли перезапустить этот отдельный сервис или всё куда сложнее.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;При этом нужно помнить, что то, что ты обычно называешь “приложением” на самом деле тоже является сервисом. &lt;a href=&quot;https://puma.io/&quot;&gt;Puma&lt;/a&gt; с &lt;a href=&quot;https://rubyonrails.org/&quot;&gt;рельсами&lt;/a&gt; на борту — &lt;strong&gt;HTTP-сервер&lt;/strong&gt;. &lt;a href=&quot;https://github.com/ninenines/cowboy&quot;&gt;Cowboy&lt;/a&gt; с &lt;a href=&quot;https://www.phoenixframework.org/&quot;&gt;фениксом&lt;/a&gt; на борту — тоже &lt;strong&gt;HTTP-сервер&lt;/strong&gt;. &lt;del&gt;Java со спрингом &lt;em&gt;это очень плохая идея нужно от такого избавляться год назад&lt;/em&gt;&lt;/del&gt;.&lt;/p&gt;

&lt;h3 id=&quot;опиши-сеть&quot;&gt;Опиши сеть&lt;/h3&gt;
&lt;p&gt;Какие сервисы должны смотреть в мир? Какие сервисы должны смотреть друг в друга? Всё это — очень важная информация о том говнокоде, над которым ты сидел месяцами.&lt;/p&gt;

&lt;h3 id=&quot;ручки&quot;&gt;Ручки&lt;/h3&gt;
&lt;p&gt;Есть скрипт полной очистки? Кнопка пересборки кеша?&lt;br /&gt;
Нет — сделай.&lt;br /&gt;
И опиши.&lt;/p&gt;

&lt;h2 id=&quot;вместо-заключения&quot;&gt;Вместо заключения&lt;/h2&gt;
&lt;p&gt;Этим, на самом деле, список не ограничивается. Не надо “просто писать код”. Нужно делать эксплуатируемые сервисы.&lt;/p&gt;</content><author><name></name></author><summary type="html">Введение Этот пост написан в основном для тех беспечных разработчиков, которые пишут код без учёта эксплуатации. Что такое эксплуатация? Вики определяет эксплуатацию как “использование чего-либо”. Как используются программы? Их устанавливают, конфигурируют, после чего убеждаются в корректности работы в соответствии с инструкцией. Чтобы сделать программу эксплуатируемой необходимо предоставить документацию для всех этих процессов. По правде говоря, проекты (а иногда даже продукты) редко сопровождаются хотя бы какой-то документацией, не говоря уже про документацию по эксплуатации. Подход “Это как-то работает”, “просто перезапусти”, вот это всё. Поэтому я попытаюсь объяснить, как сделать веб-сервисы эксплуатируемыми. Есть один достаточно известный ресурс по этой теме, который более обширный и формальный, чем моя статья. Стандартизируй! Под этим я имею ввиду две вещи. Сделай стандарт документации по эксплуатации Во-первых, спроси своих коллег из отдела эксплуатации (админов). Особенно если уже есть какие-то сервисы в эксплуатации. Что они используют? Какой информации им не хватает? Во-вторых, изучи свои проекты (и уже в эксплуатации и в ранней разработке). Подумай обо всех местах, которые могут быть сконфигурированы, о ситуациях, которые могут случиться. Думаешь, твою систему так легко понять? Я разочарую: совсем нет. После сбора общей информации нужно написать шаблон документации по эксплуатации и всем его показать, обсудить, затем улучшить. При этом нельзя относиться к получившемуся шаблону как к чему-то неизменному. После всех инцедентов (особенно пост-мортемов) необходимо подумать, нет нужно ли добавить (или убрать) чего-то из шаблона, чтобы, обладая документацией команда эксплуатации смогла сама восстановить работу сервиса. Сделай процесс документирования обязательным для всех разработчиков С этим немного сложнее. Если ты — тимлид или старший разработчик, то используй свою власть чтобы сделать документирование эксплуатации обязательной. Если ты рядовой сотрудник — используй техники убеждения социальную инженерию, меритократические наклонности, своего начальника, свою репутацию, веди себя как полная скотина, но заставь всех писать документацию по эксплуатации. Просто поверь мне, это спасёт тебя лично от бессонных ночей (особенно если ты тимлид или менеджер). Сделай свою систему эксплуатируемой Это тоже непросто. Всё вот это добро из 12-factor — это сюда. ENV-конфиги проекта Это то, что я видел очень много раз. И каждый раз я старался от этого избавиться. Если в папке config есть что-то кроме production- и test-конфигов, всё плохо. Просто представь, в час ночи сервер БД падает без шансов на восстановление, но у админов есть реплика, на которую можно переключиться очень быстро (в пределах SLA) просто поменяв IP-адрес (или доменное имя) БД в приложении. Но с хардкодом в production-конфиге это делается только через изменение кода и редеплой приложения. И вот она, бессонная ночь. И не одна. Поэтому, чтобы сделать систему конфигурироемой “находу”, нужен либо config-provider, либо просто получение значений из ENV-переменных (со значениями по-умолчанию). Это уже добавит достаточно много сна в беспокойную жизнь разработчика. И конечно, документирование конфигурации (ENV-переменных или config-provider’ов) очень даже стоит документировать. Поверь мне. Добавь проверки запущенности (readiness) и работоспособности (liveness) Или, как некоторые их называют, хелсчеки. Я не про кубернетисы. Зачем? Админам желательно знать, когда приложение уже запустилось (readiness) и когда оно упало (liveness). Обычно веб-приложениям хватает ответа 200 OK на запрос / для обеих проверок. И затем опиши это всё в документации. Сделай кастомный endpoint для мониторинга Фишка в том, что скорее всего у админов уже есть какой-то инструмент мониторинга. Нет ничего плохого в том, чтобы помочь им. Есть подозрения, что какая-то ошибка может проявиться? Отправляй их в мониторинг. Есть внешние системы? Проверяй к ним доступ. Мы (на тех проектах, которые я разрабатывал) использовали /healthcheck с примерно следующим содержимым: db ok smtp ok rabbitmq ok И опиши это в документации по эксплуатации. Опиши все сервисы Используешь СУБД? Веб-сервер? Отправляешь email’ы? Опиши! Для каждого описываемого сервиса нужно описать: Откуда брать. Сборка кода? Docker? RPM-пакеты? Как запустить: команды, аргументы, флаги, вот это всё. Что сделать при первом старте. Например, импортировать какие-то данные “по-умолчанию” (возможно специальной командой). Зависимости. Не думаю, что есть смысл запускать сервер приложения до запуска СУБД. Масштабируемость. Веб-сервер достаточно легко (авто)масштабируется. А вот с масштабированием СУБД обычно всё не так хорошо. Требуемые ресурсы для работы. Память, процессор, диски, сокеты, inode’ы. Бэкапы. Что, как и когда нужно бэкапить и как это нужно восстанавливать. Зачем нужен этот сервис. Что именно он делает. Это поможет понять, можно ли перезапустить этот отдельный сервис или всё куда сложнее. При этом нужно помнить, что то, что ты обычно называешь “приложением” на самом деле тоже является сервисом. Puma с рельсами на борту — HTTP-сервер. Cowboy с фениксом на борту — тоже HTTP-сервер. Java со спрингом это очень плохая идея нужно от такого избавляться год назад. Опиши сеть Какие сервисы должны смотреть в мир? Какие сервисы должны смотреть друг в друга? Всё это — очень важная информация о том говнокоде, над которым ты сидел месяцами. Ручки Есть скрипт полной очистки? Кнопка пересборки кеша? Нет — сделай. И опиши. Вместо заключения Этим, на самом деле, список не ограничивается. Не надо “просто писать код”. Нужно делать эксплуатируемые сервисы.</summary></entry><entry xml:lang="en"><title type="html">Elixir in k8s</title><link href="https://ivalentinee.github.io/en/programming/2020/08/22/elixir-in-kubernetes.html" rel="alternate" type="text/html" title="Elixir in k8s" /><published>2020-08-22T00:00:00+00:00</published><updated>2020-08-22T00:00:00+00:00</updated><id>https://ivalentinee.github.io/en/programming/2020/08/22/elixir-in-kubernetes</id><content type="html" xml:base="https://ivalentinee.github.io/en/programming/2020/08/22/elixir-in-kubernetes.html">&lt;h2 id=&quot;why&quot;&gt;Why?&lt;/h2&gt;
&lt;p&gt;Because I can. Because this was the only way to setup service communication.&lt;/p&gt;

&lt;p&gt;And as I’m an &lt;a href=&quot;https://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt; writer, I’ll give code examples in Elixir (just joking, there’ll be no code examples).&lt;/p&gt;

&lt;h2 id=&quot;source-materials&quot;&gt;Source materials&lt;/h2&gt;
&lt;p&gt;I used these articles:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.erlang-solutions.com/blog/erlang-and-elixir-distribution-without-epmd.html&quot;&gt;Erlang (and Elixir) distribution without epmd&lt;/a&gt; (more to understand what’s going on)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.ispirata.com/clustering-elixir-erlang-applications-in-kubernetes-part-1-the-theory-ca658acbf101&quot;&gt;Clustering Elixir/Erlang applications in Kubernetes&lt;/a&gt; (as an example for the setup)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;начнём&quot;&gt;Начнём&lt;/h2&gt;
&lt;p&gt;So, this is the situation: there’s production app with N services (N ≤ 10) deployed to k8s (&lt;a href=&quot;https://www.openshift.com/&quot;&gt;openshift&lt;/a&gt; actually, but that doesnt matter) as a set of deploymentconfig, some deployments have &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot;&gt;k8s services&lt;/a&gt; and &lt;a href=&quot;https://docs.openshift.com/enterprise/3.0/architecture/core_concepts/routes.html&quot;&gt;routes&lt;/a&gt; pointed at them. Some services (not k8s services) use redis/memcached/PG/kafka/whatever to exchange data.&lt;/p&gt;

&lt;p&gt;But &lt;em&gt;suddenly&lt;/em&gt; (as it usually goes) a need for direct service communication appeared. For an Elixir app there’re more than one (two actually) ways of such communication:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Using “third-party” protocols (grpc and others)&lt;/li&gt;
  &lt;li&gt;Using &lt;a href=&quot;https://ru.wikipedia.org/wiki/Open_Telecom_Platform&quot;&gt;OTP&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I decided to go with OTP for these reasons:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;del&gt;Too lazy&lt;/del&gt; not enough time to implement (even with libraries) grpc and others.&lt;/li&gt;
  &lt;li&gt;Dude, that’s erlang, c’mon, we’re &lt;em&gt;fashion-driven&lt;/em&gt; programmers, aren’t we?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Erlang part of things is &lt;a href=&quot;http://erlang.org/doc/reference_manual/distributed.html&quot;&gt;really simple&lt;/a&gt;, but infrastructure caused a bit of pain.&lt;/p&gt;

&lt;h2 id=&quot;fairytale-case-scenario&quot;&gt;Fairytale-case scenario&lt;/h2&gt;
&lt;p&gt;For fairytale-case there should be &lt;strong&gt;fixed&lt;/strong&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_name&quot;&gt;DN&lt;/a&gt; for all instances of each service which automatically properly deployed and services have full network interconnection (tcp, ofc).&lt;/p&gt;

&lt;p&gt;Then we’ll just start the node:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;ERL_OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-name &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOSTNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -setcookie &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERLANG_COOKIE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
elixir &lt;span class=&quot;nt&quot;&gt;--erl&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERL_OPTIONS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; mix run &lt;span class=&quot;nt&quot;&gt;--no-halt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And run:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&quot;some_other_node@some.other.domain.name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; :pong&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But I don’t work in fairytale infrastructure with ponies, rainbows and respectful infrastructure ingeneers. Ugh.&lt;/p&gt;

&lt;h2 id=&quot;dn-discoverability&quot;&gt;DN discoverability&lt;/h2&gt;
&lt;p&gt;So, first problem: DNs are &lt;strong&gt;dynamic&lt;/strong&gt; with regular deploymentconfig. And using some sort of service-discovery won’t work properly because erlang node wants to know it’s full DN at start.&lt;/p&gt;

&lt;p&gt;Or something like that.&lt;/p&gt;

&lt;p&gt;If we use &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot;&gt;service’ы&lt;/a&gt;, we can have one DN for one deploymentconfig. But what if we have multiple instances? Where the connection will go?&lt;/p&gt;

&lt;p&gt;To sort this out we have to divide services in two groups:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Waiting for connection&lt;/li&gt;
  &lt;li&gt;Initiating connection&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;waiting-for-connection&quot;&gt;Waiting for connection&lt;/h3&gt;
&lt;p&gt;This one’s simple but has it’s limitations.&lt;/p&gt;

&lt;p&gt;We just &lt;strong&gt;don’t scale&lt;/strong&gt; these services (urghhh…).&lt;/p&gt;

&lt;p&gt;So the only instance will be available at &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot;&gt;service&lt;/a&gt; DN like &lt;code class=&quot;highlighter-rouge&quot;&gt;exclusive-service.project.svc.cluster.local&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then we start an application with known DN (I decided not to set &lt;code class=&quot;highlighter-rouge&quot;&gt;HOSTNAME&lt;/code&gt;, but use separate &lt;code class=&quot;highlighter-rouge&quot;&gt;CLUSTER_HOSTNAME&lt;/code&gt; variable):&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;ERL_OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-name &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CLUSTER_HOSTNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -setcookie &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERLANG_COOKIE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
elixir &lt;span class=&quot;nt&quot;&gt;--erl&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERL_OPTIONS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; mix run &lt;span class=&quot;nt&quot;&gt;--no-halt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;initiating-connection&quot;&gt;Initiating connection&lt;/h3&gt;
&lt;p&gt;This one’s even simpler: just start this process with any FQDN (so erlang to start with FQDN-mode). I just added some breach for debugging.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/pod/&quot;&gt;Pods&lt;/a&gt; are available (through &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot;&gt;services&lt;/a&gt;) at &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;pod-name&amp;gt;.&amp;lt;service-dn&amp;gt;&lt;/code&gt; addresses, like &lt;code class=&quot;highlighter-rouge&quot;&gt;pod-12345-qwerty.non-exclusive-service.project.svc.cluster.local&lt;/code&gt;. But we only know &lt;code class=&quot;highlighter-rouge&quot;&gt;service-dn&lt;/code&gt; beforehand and &lt;code class=&quot;highlighter-rouge&quot;&gt;pod-name&lt;/code&gt; is put into &lt;code class=&quot;highlighter-rouge&quot;&gt;HOSTNAME&lt;/code&gt; variable as start.&lt;/p&gt;

&lt;p&gt;What should we do? Build effective DN at start:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;ERL_OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-name &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOSTNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CLUSTER_HOSTNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -setcookie &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERLANG_COOKIE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
elixir &lt;span class=&quot;nt&quot;&gt;--erl&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERL_OPTIONS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; mix run &lt;span class=&quot;nt&quot;&gt;--no-halt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So if one service will have to instances we’ll be able to communicate to every instance with it’s name. This method could be used with service-discovery. I just use it for debugging.&lt;/p&gt;

&lt;h2 id=&quot;ports&quot;&gt;Ports&lt;/h2&gt;
&lt;p&gt;Problem #2: port forwarding. There’re to ports required: &lt;a href=&quot;https://erlang.org/doc/man/epmd.html&quot;&gt;epmd&lt;/a&gt; and erlang process itself&lt;/p&gt;

&lt;h3 id=&quot;empd&quot;&gt;empd&lt;/h3&gt;
&lt;p&gt;Again, pretty simple.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://erlang.org/doc/man/epmd.html&quot;&gt;epmd&lt;/a&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;4369&lt;/code&gt; as listening port. So we need to forward it in &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot;&gt;services&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;epmd&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4369&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4369&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;deploymentconfig&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;some-service&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;erlang-process&quot;&gt;Erlang process&lt;/h3&gt;
&lt;p&gt;That one’s a bit tricky. Every erlang process listens at some random port for OTP connections and registers at empd. For outgoing connections erlang process connects to epmd and asks “which port &lt;em&gt;this&lt;/em&gt; process runs at?”&lt;/p&gt;

&lt;p&gt;And, as epmd problem is easily solved, “random” port requires some more handling.&lt;/p&gt;

&lt;p&gt;Forwarding all 65535 ports is not a good idea for many reasons (including me not finding directive “forward everything, I don’t care”).&lt;/p&gt;

&lt;p&gt;To enable erlang processes communication we should forward some &lt;strong&gt;exact&lt;/strong&gt; port and force erlang process to listen on that port.&lt;/p&gt;

&lt;p&gt;First one is, again, simple:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;erlang-process&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;43691&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;43691&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;deploymentconfig&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;some-service&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the second one we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;inet_dist_listen_min&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;inet_dist_listen_max&lt;/code&gt; start options, which set listening port range, to limit erlang process to exactly one port:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;ERL_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;43691
&lt;span class=&quot;nv&quot;&gt;ERL_KERNEL_OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-kernel inet_dist_listen_min &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERL_PORT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; inet_dist_listen_max &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERL_PORT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ERL_OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-name &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CLUSTER_HOSTNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -setcookie &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERLANG_COOKIE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERL_KERNEL_OPTIONS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
elixir &lt;span class=&quot;nt&quot;&gt;--erl&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERL_OPTIONS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; mix run &lt;span class=&quot;nt&quot;&gt;--no-halt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And, voila, erlang processes are running and communicating!&lt;/p&gt;

&lt;p&gt;Obviously, running multiple OS erlang processes is impossible with this approach. But don’t we use k8s just for that “one process per container”?&lt;/p&gt;

&lt;p&gt;Of course, we can just &lt;a href=&quot;https://www.erlang-solutions.com/blog/erlang-and-elixir-distribution-without-epmd.html&quot;&gt;omit empd at all&lt;/a&gt; for single-process setup, but that requires copy-pasting some actual erlang code.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This approach is for deploymentconfigs. There’s alternatice &lt;a href=&quot;https://blog.ispirata.com/clustering-elixir-erlang-applications-in-kubernetes-part-1-the-theory-ca658acbf101&quot;&gt;using StatefulSets&lt;/a&gt;, which, in theory, looks cooler, but required complete resetup for an already running production app (no downtimes allowed, ofc).&lt;/p&gt;</content><author><name></name></author><summary type="html">Why? Because I can. Because this was the only way to setup service communication. And as I’m an Elixir writer, I’ll give code examples in Elixir (just joking, there’ll be no code examples). Source materials I used these articles: Erlang (and Elixir) distribution without epmd (more to understand what’s going on) Clustering Elixir/Erlang applications in Kubernetes (as an example for the setup) Начнём So, this is the situation: there’s production app with N services (N ≤ 10) deployed to k8s (openshift actually, but that doesnt matter) as a set of deploymentconfig, some deployments have k8s services and routes pointed at them. Some services (not k8s services) use redis/memcached/PG/kafka/whatever to exchange data. But suddenly (as it usually goes) a need for direct service communication appeared. For an Elixir app there’re more than one (two actually) ways of such communication: Using “third-party” protocols (grpc and others) Using OTP I decided to go with OTP for these reasons: Too lazy not enough time to implement (even with libraries) grpc and others. Dude, that’s erlang, c’mon, we’re fashion-driven programmers, aren’t we? Erlang part of things is really simple, but infrastructure caused a bit of pain. Fairytale-case scenario For fairytale-case there should be fixed DN for all instances of each service which automatically properly deployed and services have full network interconnection (tcp, ofc). Then we’ll just start the node: ERL_OPTIONS=&quot;-name ${SNAME}@${HOSTNAME} -setcookie ${ERLANG_COOKIE}&quot; elixir --erl &quot;${ERL_OPTIONS}&quot; -S mix run --no-halt And run: Node.ping(:&quot;some_other_node@some.other.domain.name&quot;) # =&amp;gt; :pong But I don’t work in fairytale infrastructure with ponies, rainbows and respectful infrastructure ingeneers. Ugh. DN discoverability So, first problem: DNs are dynamic with regular deploymentconfig. And using some sort of service-discovery won’t work properly because erlang node wants to know it’s full DN at start. Or something like that. If we use service’ы, we can have one DN for one deploymentconfig. But what if we have multiple instances? Where the connection will go? To sort this out we have to divide services in two groups: Waiting for connection Initiating connection Waiting for connection This one’s simple but has it’s limitations. We just don’t scale these services (urghhh…). So the only instance will be available at service DN like exclusive-service.project.svc.cluster.local. Then we start an application with known DN (I decided not to set HOSTNAME, but use separate CLUSTER_HOSTNAME variable): ERL_OPTIONS=&quot;-name ${SNAME}@${CLUSTER_HOSTNAME} -setcookie ${ERLANG_COOKIE}&quot; elixir --erl &quot;${ERL_OPTIONS}&quot; -S mix run --no-halt Initiating connection This one’s even simpler: just start this process with any FQDN (so erlang to start with FQDN-mode). I just added some breach for debugging. Pods are available (through services) at &amp;lt;pod-name&amp;gt;.&amp;lt;service-dn&amp;gt; addresses, like pod-12345-qwerty.non-exclusive-service.project.svc.cluster.local. But we only know service-dn beforehand and pod-name is put into HOSTNAME variable as start. What should we do? Build effective DN at start: ERL_OPTIONS=&quot;-name ${SNAME}@${HOSTNAME}.${CLUSTER_HOSTNAME} -setcookie ${ERLANG_COOKIE}&quot; elixir --erl &quot;${ERL_OPTIONS}&quot; -S mix run --no-halt So if one service will have to instances we’ll be able to communicate to every instance with it’s name. This method could be used with service-discovery. I just use it for debugging. Ports Problem #2: port forwarding. There’re to ports required: epmd and erlang process itself empd Again, pretty simple. epmd uses 4369 as listening port. So we need to forward it in services: apiVersion: v1 kind: Service # ... spec: ports: - name: epmd port: 4369 protocol: TCP targetPort: 4369 selector: deploymentconfig: some-service # ... Erlang process That one’s a bit tricky. Every erlang process listens at some random port for OTP connections and registers at empd. For outgoing connections erlang process connects to epmd and asks “which port this process runs at?” And, as epmd problem is easily solved, “random” port requires some more handling. Forwarding all 65535 ports is not a good idea for many reasons (including me not finding directive “forward everything, I don’t care”). To enable erlang processes communication we should forward some exact port and force erlang process to listen on that port. First one is, again, simple: apiVersion: v1 kind: Service # ... spec: ports: - name: erlang-process port: 43691 protocol: TCP targetPort: 43691 selector: deploymentconfig: some-service # ... For the second one we can use inet_dist_listen_min и inet_dist_listen_max start options, which set listening port range, to limit erlang process to exactly one port: ERL_PORT=43691 ERL_KERNEL_OPTIONS=&quot;-kernel inet_dist_listen_min ${ERL_PORT} inet_dist_listen_max ${ERL_PORT}&quot; ERL_OPTIONS=&quot;-name ${SNAME}@${CLUSTER_HOSTNAME} -setcookie ${ERLANG_COOKIE} ${ERL_KERNEL_OPTIONS}&quot; elixir --erl &quot;${ERL_OPTIONS}&quot; -S mix run --no-halt And, voila, erlang processes are running and communicating! Obviously, running multiple OS erlang processes is impossible with this approach. But don’t we use k8s just for that “one process per container”? Of course, we can just omit empd at all for single-process setup, but that requires copy-pasting some actual erlang code. Conclusion This approach is for deploymentconfigs. There’s alternatice using StatefulSets, which, in theory, looks cooler, but required complete resetup for an already running production app (no downtimes allowed, ofc).</summary></entry><entry xml:lang="en"><title type="html">Using ‘alias’ in Elixir</title><link href="https://ivalentinee.github.io/en/programming/2020/08/22/aliases-in-elixir.html" rel="alternate" type="text/html" title="Using 'alias' in Elixir" /><published>2020-08-22T00:00:00+00:00</published><updated>2020-08-22T00:00:00+00:00</updated><id>https://ivalentinee.github.io/en/programming/2020/08/22/aliases-in-elixir</id><content type="html" xml:base="https://ivalentinee.github.io/en/programming/2020/08/22/aliases-in-elixir.html">&lt;p&gt;This one is short, but I think I should white down this insight.&lt;/p&gt;

&lt;p&gt;My main argument (not just against &lt;a href=&quot;https://www.ruby-lang.org/&quot;&gt;Ruby&lt;/a&gt;, but overall) looks like this: “Code should annotate not only dependancies, but dependants”.&lt;/p&gt;

&lt;p&gt;In case of Elixir dependancies are easy to track just by looking at &lt;code class=&quot;highlighter-rouge&quot;&gt;alias&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; (rarely &lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt;). However, annotating dependants would make writing code an unpleasant experience. But there’s a way.&lt;/p&gt;

&lt;p&gt;There’re 2 (okay, 1.5) ways to write &lt;code class=&quot;highlighter-rouge&quot;&gt;alias&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SomeModule1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SomeModule2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SomeModule1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeModule2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I think, that the first way is preferable. Why? Because it automatically “annotates” dependants (spoiler: use &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Let’s suppose there’re three modules in our system: &lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject.Family.Father&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject.Family.Son1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject.Family.Son2&lt;/code&gt;. Module &lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject.Family.Father&lt;/code&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;..Son1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;..Son2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In case of full annotation&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Father&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Son1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Son2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;searching &lt;strong&gt;full&lt;/strong&gt; module name &lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject.Family.Son1&lt;/code&gt; would tell, that this name is mentioned in &lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject.Family.Father&lt;/code&gt;, but using short annotation&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Father&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Son1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Son2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;searching &lt;strong&gt;full&lt;/strong&gt; module name &lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject.Family.Son1&lt;/code&gt; will tell nothing.&lt;/p&gt;

&lt;p&gt;One might argue: “But you can search &lt;code class=&quot;highlighter-rouge&quot;&gt;Son1&lt;/code&gt; and not the full  name?” But that works only for &lt;strong&gt;unique&lt;/strong&gt; short names. In case of “&lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject.Family1.{Father, Son1, Son2}&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject.Family2.{Father, Son1, Son2}&lt;/code&gt;” you’ll have to sort out things manually, when &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; can easily take care of full annotations (hint: &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt; doesn’t get tired like you do).&lt;/p&gt;

&lt;p&gt;Summary: project should be “greppable”, but doing nothing to make it so will render project almost impossible to understand (hello, &lt;a href=&quot;https://www.ruby-lang.org/&quot;&gt;Ruby&lt;/a&gt;).&lt;/p&gt;</content><author><name></name></author><summary type="html">This one is short, but I think I should white down this insight. My main argument (not just against Ruby, but overall) looks like this: “Code should annotate not only dependancies, but dependants”. In case of Elixir dependancies are easy to track just by looking at alias and import (rarely use). However, annotating dependants would make writing code an unpleasant experience. But there’s a way. There’re 2 (okay, 1.5) ways to write alias: alias SomeProject.SomeModule1 alias SomeProject.SomeModule2 and alias SomeProject.{SomeModule1, SomeModule2} I think, that the first way is preferable. Why? Because it automatically “annotates” dependants (spoiler: use grep). Let’s suppose there’re three modules in our system: SomeProject.Family.Father, SomeProject.Family.Son1, SomeProject.Family.Son2. Module SomeProject.Family.Father uses ..Son1 and ..Son2. In case of full annotation defmodule SomeProject.Family.Father do alias SomeProject.Family.Son1 alias SomeProject.Family.Son2 searching full module name SomeProject.Family.Son1 would tell, that this name is mentioned in SomeProject.Family.Father, but using short annotation defmodule SomeProject.Family.Father do alias SomeProject.Family.{Son1, Son2} searching full module name SomeProject.Family.Son1 will tell nothing. One might argue: “But you can search Son1 and not the full name?” But that works only for unique short names. In case of “SomeProject.Family1.{Father, Son1, Son2} and SomeProject.Family2.{Father, Son1, Son2}” you’ll have to sort out things manually, when grep can easily take care of full annotations (hint: grep doesn’t get tired like you do). Summary: project should be “greppable”, but doing nothing to make it so will render project almost impossible to understand (hello, Ruby).</summary></entry><entry xml:lang="ru"><title type="html">Использование команды alias в Elixir</title><link href="https://ivalentinee.github.io/ru/programming/2020/08/22/aliases-in-elixir.html" rel="alternate" type="text/html" title="Использование команды alias в Elixir" /><published>2020-08-22T00:00:00+00:00</published><updated>2020-08-22T00:00:00+00:00</updated><id>https://ivalentinee.github.io/ru/programming/2020/08/22/aliases-in-elixir</id><content type="html" xml:base="https://ivalentinee.github.io/ru/programming/2020/08/22/aliases-in-elixir.html">&lt;p&gt;Это будет очень короткая заметка, но, так как озарение внезапное, лучше оставить текстом, чем забыть.&lt;/p&gt;

&lt;p&gt;Мой основной довод (не только против &lt;a href=&quot;https://www.ruby-lang.org/&quot;&gt;Ruby&lt;/a&gt;, вообще про написание кода) звучит примерно так: “Код должен иметь чёткие аннотации зависимостей и зависимых модулей”.&lt;/p&gt;

&lt;p&gt;В случае Elixir зависимости отслеживаются легко, достаточно посмотреть список &lt;code class=&quot;highlighter-rouge&quot;&gt;alias&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; (в редких случаях &lt;code class=&quot;highlighter-rouge&quot;&gt;use&lt;/code&gt;). Однако строгая аннотация зависимых модулей делала бы написание кода бессмысленно сложным. Но есть выход.&lt;/p&gt;

&lt;p&gt;В Elixir есть два (ладно, полтора) способа записи директивы &lt;code class=&quot;highlighter-rouge&quot;&gt;alias&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SomeModule1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SomeModule2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;и&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;SomeModule1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeModule2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Но я считаю, что первый способ предпочтительнее. Почему? Потому что он автоматически “делает аннотацию” зависимых модулей (спойлер: нужно использовать &lt;code class=&quot;highlighter-rouge&quot;&gt;grep&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Предположим, что в системе (&lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject&lt;/code&gt;) есть три модуля: &lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject.Family.Father&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject.Family.Son1&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject.Family.Son2&lt;/code&gt;. Модуль &lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject.Family.Father&lt;/code&gt; использует модули &lt;code class=&quot;highlighter-rouge&quot;&gt;..Son1&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;..Son2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;В случае полной записи&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Father&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Son1&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Son2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;поиск по &lt;strong&gt;полному&lt;/strong&gt; имени модуля &lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject.Family.Son1&lt;/code&gt; покажет, что это имя используется в модуле &lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject.Family.Father&lt;/code&gt;, но при использовании сокращённой записи&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Father&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SomeProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Family&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Son1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Son2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;поиск по &lt;strong&gt;полному&lt;/strong&gt; имени модуля &lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject.Family.Son1&lt;/code&gt; не выдаст ничего.&lt;/p&gt;

&lt;p&gt;Можно возразить: “Но можно же искать по имени &lt;code class=&quot;highlighter-rouge&quot;&gt;Son1&lt;/code&gt;, а не по полному”? Но это работает только в том случае, если короткое имя модуля уникально. То есть в ситуации “&lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject.Family1.{Father, Son1, Son2}&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;SomeProject.Family2.{Father, Son1, Son2}&lt;/code&gt;” нужно будет вручную отсеивать ненужные результаты, в то время как при полной аннотации этим мог бы заняться grep (его не жалко, он не устаёт).&lt;/p&gt;

&lt;p&gt;Резюмирую: проект должен “грепаться”, и если не ничего для этого не предпринимать, изучение проекта может не работать вообще (привет, &lt;a href=&quot;https://www.ruby-lang.org/&quot;&gt;Ruby&lt;/a&gt;).&lt;/p&gt;</content><author><name></name></author><summary type="html">Это будет очень короткая заметка, но, так как озарение внезапное, лучше оставить текстом, чем забыть. Мой основной довод (не только против Ruby, вообще про написание кода) звучит примерно так: “Код должен иметь чёткие аннотации зависимостей и зависимых модулей”. В случае Elixir зависимости отслеживаются легко, достаточно посмотреть список alias и import (в редких случаях use). Однако строгая аннотация зависимых модулей делала бы написание кода бессмысленно сложным. Но есть выход. В Elixir есть два (ладно, полтора) способа записи директивы alias: alias SomeProject.SomeModule1 alias SomeProject.SomeModule2 и alias SomeProject.{SomeModule1, SomeModule2} Но я считаю, что первый способ предпочтительнее. Почему? Потому что он автоматически “делает аннотацию” зависимых модулей (спойлер: нужно использовать grep). Предположим, что в системе (SomeProject) есть три модуля: SomeProject.Family.Father, SomeProject.Family.Son1, SomeProject.Family.Son2. Модуль SomeProject.Family.Father использует модули ..Son1 и ..Son2. В случае полной записи defmodule SomeProject.Family.Father do alias SomeProject.Family.Son1 alias SomeProject.Family.Son2 поиск по полному имени модуля SomeProject.Family.Son1 покажет, что это имя используется в модуле SomeProject.Family.Father, но при использовании сокращённой записи defmodule SomeProject.Family.Father do alias SomeProject.Family.{Son1, Son2} поиск по полному имени модуля SomeProject.Family.Son1 не выдаст ничего. Можно возразить: “Но можно же искать по имени Son1, а не по полному”? Но это работает только в том случае, если короткое имя модуля уникально. То есть в ситуации “SomeProject.Family1.{Father, Son1, Son2} и SomeProject.Family2.{Father, Son1, Son2}” нужно будет вручную отсеивать ненужные результаты, в то время как при полной аннотации этим мог бы заняться grep (его не жалко, он не устаёт). Резюмирую: проект должен “грепаться”, и если не ничего для этого не предпринимать, изучение проекта может не работать вообще (привет, Ruby).</summary></entry><entry xml:lang="ru"><title type="html">Еликсиръ в кубернетисах</title><link href="https://ivalentinee.github.io/ru/programming/2019/10/01/elixir-in-kubernetes.html" rel="alternate" type="text/html" title="Еликсиръ в кубернетисах" /><published>2019-10-01T00:00:00+00:00</published><updated>2019-10-01T00:00:00+00:00</updated><id>https://ivalentinee.github.io/ru/programming/2019/10/01/elixir-in-kubernetes</id><content type="html" xml:base="https://ivalentinee.github.io/ru/programming/2019/10/01/elixir-in-kubernetes.html">&lt;h2 id=&quot;зачем&quot;&gt;Зачем?&lt;/h2&gt;
&lt;p&gt;Потому что могу. Потому что это был самый адекватный организовать общение между сервисами.&lt;/p&gt;

&lt;p&gt;А так как я пейсатель на еликсиряхъ, то пояснения буду приводить на них (шучу, примеров кода не будет).&lt;/p&gt;

&lt;h2 id=&quot;исходники&quot;&gt;Исходники&lt;/h2&gt;
&lt;p&gt;Для организации подхода использовались статьи:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.erlang-solutions.com/blog/erlang-and-elixir-distribution-without-epmd.html&quot;&gt;Erlang (and Elixir) distribution without epmd&lt;/a&gt; (больше для понимания происходящего)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.ispirata.com/clustering-elixir-erlang-applications-in-kubernetes-part-1-the-theory-ca658acbf101&quot;&gt;Clustering Elixir/Erlang applications in Kubernetes&lt;/a&gt; (как пример организации)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;начнём&quot;&gt;Начнём&lt;/h2&gt;
&lt;p&gt;Итак, ситуация: готовое приложение на N сервисов (где N ≤ 10), развёрнутое в кубернетисах (на самом деле в &lt;a href=&quot;https://www.openshift.com/&quot;&gt;шифтах&lt;/a&gt;, но не суть) в качестве набора deploymentconfig’ов, на нужные сервисы развёрнуты &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot;&gt;service’ы&lt;/a&gt; (слово “сервис” буду использовать для частей приложения, а “service” — для сущности kubernetes’а) и &lt;a href=&quot;https://docs.openshift.com/enterprise/3.0/architecture/core_concepts/routes.html&quot;&gt;маршруты&lt;/a&gt;. Сервисы складывают общую информацию в redis/memcached/postgresql/kafka/whatever, за счёт чего и происходит косвенное взаимодействие.&lt;/p&gt;

&lt;p&gt;И тут появилась необходимость прямого взаимодействия между сервисами. Благодаря тому, что приложение написано на elixir’е, вариантов оказалось не один, а два, а именно:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Общение через реализацию протоколов (grpc и co.)&lt;/li&gt;
  &lt;li&gt;Общение через &lt;a href=&quot;https://ru.wikipedia.org/wiki/Open_Telecom_Platform&quot;&gt;OTP&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;На второй вариант выбор пал по двум причинам:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;del&gt;Лень&lt;/del&gt; Некогда имплементить (или прикручивать готовую реализацию) всяких grpc.&lt;/li&gt;
  &lt;li&gt;Ну ерланги жеж, надо всё как у модных людей, в конце концов.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;И если на уровне erlang’а всё оказалось &lt;a href=&quot;http://erlang.org/doc/reference_manual/distributed.html&quot;&gt;очень просто&lt;/a&gt;, то на уровне инфраструктуры пришлось городить всякое разное.&lt;/p&gt;

&lt;h2 id=&quot;идеальный-мир&quot;&gt;Идеальный мир&lt;/h2&gt;
&lt;p&gt;Итак, для идеального мира нам нужно иметь &lt;strong&gt;заранее известные&lt;/strong&gt; &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_name&quot;&gt;DN&lt;/a&gt; для всех инстансов всех сервисов, которые автоматически доставляются куда нужно и как нужно, а между сервисами есть полная сетевая связность (можно установить tcp-соединение между любыми приложениями по любому порту).&lt;/p&gt;

&lt;p&gt;После чего остаётся только запустить ноду:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;ERL_OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-name &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOSTNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -setcookie &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERLANG_COOKIE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
elixir &lt;span class=&quot;nt&quot;&gt;--erl&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERL_OPTIONS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; mix run &lt;span class=&quot;nt&quot;&gt;--no-halt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ну и в самой ноде можно спокойно выполнить:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ping&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&quot;some_other_node@some.other.domain.name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; :pong&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Но приложение наше развёрнуто было не в идеальном мире с понями и вежливыми девопсами, а в кубернетисах. Увы.&lt;/p&gt;

&lt;h2 id=&quot;доступность-по-доменным-именам&quot;&gt;Доступность по доменным именам&lt;/h2&gt;
&lt;p&gt;Итак, первая проблема: доменные имена при использовании deploymentconfig’ов &lt;strong&gt;динамические&lt;/strong&gt;. Причём discovery-сервис не очень получится использовать, потому что erlang-ноде нужно знать внешний адрес при старте.&lt;/p&gt;

&lt;p&gt;Ну то есть не совсем.&lt;/p&gt;

&lt;p&gt;Если мы используем &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot;&gt;service’ы&lt;/a&gt;, то мы можем получить один DN для конкретного deploymentconfig’а. Но что если мы какой-то dc замасштабируем? Куда пойдёт соединение?&lt;/p&gt;

&lt;p&gt;Для этого сервисы необходимо разделить на две группы:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Ожидающие соединения&lt;/li&gt;
  &lt;li&gt;Инициирующие соединие&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;ожидающие-соединения&quot;&gt;Ожидающие соединения&lt;/h3&gt;
&lt;p&gt;Тут всё достаточно просто, но тупо и с ограничениями.&lt;/p&gt;

&lt;p&gt;Ожидающие соединения сервисы мы &lt;strong&gt;не масштабируем&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Таком образом единственный инстанс будет доступен по DN &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot;&gt;service’а&lt;/a&gt; вроде вот такого: &lt;code class=&quot;highlighter-rouge&quot;&gt;exclusive-service.project.svc.cluster.local&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Далее запускаем приложение с заранее известным DN (в данном случае я решил не переназначать &lt;code class=&quot;highlighter-rouge&quot;&gt;HOSTNAME&lt;/code&gt;, а использовать отдельную переменную &lt;code class=&quot;highlighter-rouge&quot;&gt;CLUSTER_HOSTNAME&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;ERL_OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-name &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CLUSTER_HOSTNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -setcookie &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERLANG_COOKIE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
elixir &lt;span class=&quot;nt&quot;&gt;--erl&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERL_OPTIONS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; mix run &lt;span class=&quot;nt&quot;&gt;--no-halt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;инициирующие-соединение&quot;&gt;Инициирующие соединение&lt;/h3&gt;
&lt;p&gt;Тут всё ещё проще: достаточно запустить процесс с любым FQDN (чтобы erlang запустился в FQDN-режиме). Но я предпочёл оставить дырку для дебага.&lt;/p&gt;

&lt;p&gt;Конкретные &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/pod/&quot;&gt;поды&lt;/a&gt; доступны (через &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot;&gt;service’ы&lt;/a&gt;) по адресам &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;pod-name&amp;gt;.&amp;lt;service-dn&amp;gt;&lt;/code&gt;, например &lt;code class=&quot;highlighter-rouge&quot;&gt;pod-12345-qwerty.non-exclusive-service.project.svc.cluster.local&lt;/code&gt;. Но заранее мы знаем только &lt;code class=&quot;highlighter-rouge&quot;&gt;service-dn&lt;/code&gt;, а &lt;code class=&quot;highlighter-rouge&quot;&gt;pod-name&lt;/code&gt; прилетает при старте в переменной &lt;code class=&quot;highlighter-rouge&quot;&gt;HOSTNAME&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Что делаем? Составляем эффективный DN при старте:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;ERL_OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-name &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOSTNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CLUSTER_HOSTNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -setcookie &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERLANG_COOKIE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
elixir &lt;span class=&quot;nt&quot;&gt;--erl&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERL_OPTIONS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; mix run &lt;span class=&quot;nt&quot;&gt;--no-halt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Таким образом если за одним сервисом окажется два инстанса, мы сможем обратиться к каждому по конкретному имени. Можно использовать эту технику с service-discovery. Я использую этот способ просто для дебага (залезть с одной ноды на другую и чего-нибудь дёрнуть).&lt;/p&gt;

&lt;h2 id=&quot;порты&quot;&gt;Порты&lt;/h2&gt;
&lt;p&gt;Проблема вторая: проброс портов. Порта нам нужно пробросить два: один для &lt;a href=&quot;https://erlang.org/doc/man/epmd.html&quot;&gt;empd&lt;/a&gt;, второй для erlang-процесса.&lt;/p&gt;

&lt;h3 id=&quot;empd&quot;&gt;empd&lt;/h3&gt;
&lt;p&gt;Тут всё просто.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://erlang.org/doc/man/epmd.html&quot;&gt;epmd&lt;/a&gt; использует для входящих соединений порт &lt;code class=&quot;highlighter-rouge&quot;&gt;4369&lt;/code&gt;. Его-то в &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot;&gt;service’ах&lt;/a&gt; и открываем:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;epmd&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4369&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;4369&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;deploymentconfig&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;some-service&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;erlang-процесс&quot;&gt;Erlang-процесс&lt;/h3&gt;
&lt;p&gt;Тут всё интереснее. Каждый erlang-процесс при старте начинает слушать на каком-то случайном порту входящие OTP-соединения и регистрируется в epmd. При исходящих соединениях erlang-процесс коннектится к epmd на целевой машине и спрашивает: “На каком порту у тебя работает такой-то процесс?”&lt;/p&gt;

&lt;p&gt;И если с подключением к epmd вопрос решён, то со “случайным” портом нужно что-то придумывать.&lt;/p&gt;

&lt;p&gt;Увы, открыть все 65535 портов — такая себе идея. По крайней мере я не нашёл в документации способа написать “а вот тут открой вообще все порты”. Только отображение один-в-один.&lt;/p&gt;

&lt;p&gt;Для того, чтобы обеспечить возможность соединения необходимо открыть какой-нибудь один порт и заставить erlang-процесс слушать именно на нём.&lt;/p&gt;

&lt;p&gt;Первое делается достаточно просто:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;erlang-process&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;43691&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;43691&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;deploymentconfig&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;some-service&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;А для второго используем опции запуска &lt;code class=&quot;highlighter-rouge&quot;&gt;inet_dist_listen_min&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;inet_dist_listen_max&lt;/code&gt;, которые задают диапазон используемых портов, чтобы оставить один единственный порт:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;ERL_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;43691
&lt;span class=&quot;nv&quot;&gt;ERL_KERNEL_OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-kernel inet_dist_listen_min &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERL_PORT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; inet_dist_listen_max &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERL_PORT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ERL_OPTIONS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-name &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CLUSTER_HOSTNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; -setcookie &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERLANG_COOKIE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERL_KERNEL_OPTIONS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
elixir &lt;span class=&quot;nt&quot;&gt;--erl&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ERL_OPTIONS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; mix run &lt;span class=&quot;nt&quot;&gt;--no-halt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;И вуаля, erlang-процессы запущены и могут связаться друг с другом!&lt;/p&gt;

&lt;p&gt;Очевидно, что с таким подходом запустить неизвестное заранее количество erlang-процессов в одном контейнере мы не сможем. Но для того контейнеры и нужны же, чтобы один процесс запускать.&lt;/p&gt;

&lt;p&gt;Конечно, в случае одного заранее известного процесса можно жить и &lt;a href=&quot;https://www.erlang-solutions.com/blog/erlang-and-elixir-distribution-without-epmd.html&quot;&gt;вообще без epmd&lt;/a&gt;, но для этого нужно было бы писать (копипастить) лишний код.&lt;/p&gt;

&lt;h2 id=&quot;заключение&quot;&gt;Заключение&lt;/h2&gt;
&lt;p&gt;Данный подход расписан для случая с deploymentconfig’ами. Есть подход &lt;a href=&quot;https://blog.ispirata.com/clustering-elixir-erlang-applications-in-kubernetes-part-1-the-theory-ca658acbf101&quot;&gt;с использованием StatefulSet’ов&lt;/a&gt; (как пример организации), который в теории круче, но у меня уже было готовое приложение и на его пересборку с даунтаймом никто бы не подписался.&lt;/p&gt;</content><author><name></name></author><summary type="html">Зачем? Потому что могу. Потому что это был самый адекватный организовать общение между сервисами. А так как я пейсатель на еликсиряхъ, то пояснения буду приводить на них (шучу, примеров кода не будет). Исходники Для организации подхода использовались статьи: Erlang (and Elixir) distribution without epmd (больше для понимания происходящего) Clustering Elixir/Erlang applications in Kubernetes (как пример организации) Начнём Итак, ситуация: готовое приложение на N сервисов (где N ≤ 10), развёрнутое в кубернетисах (на самом деле в шифтах, но не суть) в качестве набора deploymentconfig’ов, на нужные сервисы развёрнуты service’ы (слово “сервис” буду использовать для частей приложения, а “service” — для сущности kubernetes’а) и маршруты. Сервисы складывают общую информацию в redis/memcached/postgresql/kafka/whatever, за счёт чего и происходит косвенное взаимодействие. И тут появилась необходимость прямого взаимодействия между сервисами. Благодаря тому, что приложение написано на elixir’е, вариантов оказалось не один, а два, а именно: Общение через реализацию протоколов (grpc и co.) Общение через OTP На второй вариант выбор пал по двум причинам: Лень Некогда имплементить (или прикручивать готовую реализацию) всяких grpc. Ну ерланги жеж, надо всё как у модных людей, в конце концов. И если на уровне erlang’а всё оказалось очень просто, то на уровне инфраструктуры пришлось городить всякое разное. Идеальный мир Итак, для идеального мира нам нужно иметь заранее известные DN для всех инстансов всех сервисов, которые автоматически доставляются куда нужно и как нужно, а между сервисами есть полная сетевая связность (можно установить tcp-соединение между любыми приложениями по любому порту). После чего остаётся только запустить ноду: ERL_OPTIONS=&quot;-name ${SNAME}@${HOSTNAME} -setcookie ${ERLANG_COOKIE}&quot; elixir --erl &quot;${ERL_OPTIONS}&quot; -S mix run --no-halt Ну и в самой ноде можно спокойно выполнить: Node.ping(:&quot;some_other_node@some.other.domain.name&quot;) # =&amp;gt; :pong Но приложение наше развёрнуто было не в идеальном мире с понями и вежливыми девопсами, а в кубернетисах. Увы. Доступность по доменным именам Итак, первая проблема: доменные имена при использовании deploymentconfig’ов динамические. Причём discovery-сервис не очень получится использовать, потому что erlang-ноде нужно знать внешний адрес при старте. Ну то есть не совсем. Если мы используем service’ы, то мы можем получить один DN для конкретного deploymentconfig’а. Но что если мы какой-то dc замасштабируем? Куда пойдёт соединение? Для этого сервисы необходимо разделить на две группы: Ожидающие соединения Инициирующие соединие Ожидающие соединения Тут всё достаточно просто, но тупо и с ограничениями. Ожидающие соединения сервисы мы не масштабируем. Таком образом единственный инстанс будет доступен по DN service’а вроде вот такого: exclusive-service.project.svc.cluster.local. Далее запускаем приложение с заранее известным DN (в данном случае я решил не переназначать HOSTNAME, а использовать отдельную переменную CLUSTER_HOSTNAME): ERL_OPTIONS=&quot;-name ${SNAME}@${CLUSTER_HOSTNAME} -setcookie ${ERLANG_COOKIE}&quot; elixir --erl &quot;${ERL_OPTIONS}&quot; -S mix run --no-halt Инициирующие соединение Тут всё ещё проще: достаточно запустить процесс с любым FQDN (чтобы erlang запустился в FQDN-режиме). Но я предпочёл оставить дырку для дебага. Конкретные поды доступны (через service’ы) по адресам &amp;lt;pod-name&amp;gt;.&amp;lt;service-dn&amp;gt;, например pod-12345-qwerty.non-exclusive-service.project.svc.cluster.local. Но заранее мы знаем только service-dn, а pod-name прилетает при старте в переменной HOSTNAME. Что делаем? Составляем эффективный DN при старте: ERL_OPTIONS=&quot;-name ${SNAME}@${HOSTNAME}.${CLUSTER_HOSTNAME} -setcookie ${ERLANG_COOKIE}&quot; elixir --erl &quot;${ERL_OPTIONS}&quot; -S mix run --no-halt Таким образом если за одним сервисом окажется два инстанса, мы сможем обратиться к каждому по конкретному имени. Можно использовать эту технику с service-discovery. Я использую этот способ просто для дебага (залезть с одной ноды на другую и чего-нибудь дёрнуть). Порты Проблема вторая: проброс портов. Порта нам нужно пробросить два: один для empd, второй для erlang-процесса. empd Тут всё просто. epmd использует для входящих соединений порт 4369. Его-то в service’ах и открываем: apiVersion: v1 kind: Service # ... spec: ports: - name: epmd port: 4369 protocol: TCP targetPort: 4369 selector: deploymentconfig: some-service # ... Erlang-процесс Тут всё интереснее. Каждый erlang-процесс при старте начинает слушать на каком-то случайном порту входящие OTP-соединения и регистрируется в epmd. При исходящих соединениях erlang-процесс коннектится к epmd на целевой машине и спрашивает: “На каком порту у тебя работает такой-то процесс?” И если с подключением к epmd вопрос решён, то со “случайным” портом нужно что-то придумывать. Увы, открыть все 65535 портов — такая себе идея. По крайней мере я не нашёл в документации способа написать “а вот тут открой вообще все порты”. Только отображение один-в-один. Для того, чтобы обеспечить возможность соединения необходимо открыть какой-нибудь один порт и заставить erlang-процесс слушать именно на нём. Первое делается достаточно просто: apiVersion: v1 kind: Service # ... spec: ports: - name: erlang-process port: 43691 protocol: TCP targetPort: 43691 selector: deploymentconfig: some-service # ... А для второго используем опции запуска inet_dist_listen_min и inet_dist_listen_max, которые задают диапазон используемых портов, чтобы оставить один единственный порт: ERL_PORT=43691 ERL_KERNEL_OPTIONS=&quot;-kernel inet_dist_listen_min ${ERL_PORT} inet_dist_listen_max ${ERL_PORT}&quot; ERL_OPTIONS=&quot;-name ${SNAME}@${CLUSTER_HOSTNAME} -setcookie ${ERLANG_COOKIE} ${ERL_KERNEL_OPTIONS}&quot; elixir --erl &quot;${ERL_OPTIONS}&quot; -S mix run --no-halt И вуаля, erlang-процессы запущены и могут связаться друг с другом! Очевидно, что с таким подходом запустить неизвестное заранее количество erlang-процессов в одном контейнере мы не сможем. Но для того контейнеры и нужны же, чтобы один процесс запускать. Конечно, в случае одного заранее известного процесса можно жить и вообще без epmd, но для этого нужно было бы писать (копипастить) лишний код. Заключение Данный подход расписан для случая с deploymentconfig’ами. Есть подход с использованием StatefulSet’ов (как пример организации), который в теории круче, но у меня уже было готовое приложение и на его пересборку с даунтаймом никто бы не подписался.</summary></entry><entry xml:lang="en"><title type="html">Exploitation first!</title><link href="https://ivalentinee.github.io/en/programming/2019/09/14/exploitation-first.html" rel="alternate" type="text/html" title="Exploitation first!" /><published>2019-09-14T00:00:00+00:00</published><updated>2019-09-14T00:00:00+00:00</updated><id>https://ivalentinee.github.io/en/programming/2019/09/14/exploitation-first</id><content type="html" xml:base="https://ivalentinee.github.io/en/programming/2019/09/14/exploitation-first.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This post is mostly for those careless &lt;del&gt;&lt;a href=&quot;https://youtu.be/izGwDsrQ1eQ&quot;&gt;whisperers&lt;/a&gt;&lt;/del&gt; programmers who write code with no care for exploitation.&lt;/p&gt;

&lt;p&gt;What is &lt;strong&gt;exploitation&lt;/strong&gt;? &lt;a href=&quot;https://en.wiktionary.org/wiki/exploitation&quot;&gt;Wiktionary defines exploitation&lt;/a&gt; as “The act of utilizing something”. So how does one utilize programs? Sets it up, configures it and ensures that it runs as instruction specifies.&lt;/p&gt;

&lt;p&gt;In order to make your program exploitatable you need to provide documentation for every of these three steps.&lt;/p&gt;

&lt;p&gt;Truth is, it’s rare to see &lt;strong&gt;any&lt;/strong&gt; documentation at all, so exploitation is done poorly. “It works somehow” approach. “Just reboot it” approach. All that stuff.&lt;/p&gt;

&lt;p&gt;He’re some tips on how to make web-services easy to exploitate. Here’s &lt;a href=&quot;https://12factor.net/&quot;&gt;some well known paper&lt;/a&gt; on that matter, which is more declarative, formal and extensive.&lt;/p&gt;

&lt;p&gt;I do not discuss end-user installed programs, ‘cause it also requires a ton of information on distribution, which I’m not familiar with.&lt;/p&gt;

&lt;h2 id=&quot;standardize-it&quot;&gt;Standardize it!&lt;/h2&gt;

&lt;p&gt;By that I mean two things.&lt;/p&gt;

&lt;h3 id=&quot;make-exploitation-documentation-standard&quot;&gt;Make exploitation documentation standard&lt;/h3&gt;
&lt;p&gt;First, ask your exploitation department colleagues (DevOpses?). Especially if you already have some systems in exploitation (i.e. in production). What they use? What information they lack?&lt;/p&gt;

&lt;p&gt;Second, inspect your projects (both in exploitation and in early develoment). Think of all common bells and whistles to be configured, some situations that may occur. You may think your system is easy to understand for everybody. Truth is, it’s not.&lt;/p&gt;

&lt;p&gt;After all common information gathered write a template of exploitation docs and show it to everybody. Discuss it, improve it.&lt;/p&gt;

&lt;p&gt;But do not “carve this template in stone”. After every incident (especially post mortems) think of adding some things that could help exploitation team make it through harsh times without your help. Amend (but wisely!) it. Remove unused things.&lt;/p&gt;

&lt;h3 id=&quot;make-it-mandatory-for-every-developer&quot;&gt;Make it mandatory for every developer&lt;/h3&gt;
&lt;p&gt;This is a bit more difficult. If you’re on team lead/manager/big boss position, use your power to make documenting exploitation mandatory. If not, use social engineering, meritocracy, your boss, your reputation. Become an asshole. But force everybody to write that. Trust me, it will save your sleep at night (especially if you’re team lead/manager).&lt;/p&gt;

&lt;h2 id=&quot;make-your-system-exploitatable&quot;&gt;Make your system exploitatable&lt;/h2&gt;
&lt;p&gt;That’s complicated too. All that &lt;a href=&quot;https://12factor.net/&quot;&gt;12-factor apps stuff&lt;/a&gt; (and beyond) goes here.&lt;/p&gt;

&lt;h3 id=&quot;environment-configuration-files&quot;&gt;Environment configuration files&lt;/h3&gt;
&lt;p&gt;First thing I encountered countless times is “environment configuration file”. God, please, get rid of it! If your &lt;code class=&quot;highlighter-rouge&quot;&gt;config&lt;/code&gt; folder contains more than &lt;code class=&quot;highlighter-rouge&quot;&gt;production&lt;/code&gt; and derived from it &lt;code class=&quot;highlighter-rouge&quot;&gt;development&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; configs, you’ve done bad.&lt;/p&gt;

&lt;p&gt;Just imagine, what could happen if at 1:00 AM your DB server crashes without any chance to restore, but exploitation guys can quickly (within &lt;a href=&quot;https://en.wikipedia.org/wiki/Service-level_agreement&quot;&gt;SLA&lt;/a&gt; time!) restore it with different IP address/domain name. How could you change your DB hostname on the go without redeploying your app if you have it (DB hostname) in git-controlled folder with no chance to change it “on the go”? Sleepless night will suddenly get into your life =)&lt;/p&gt;

&lt;p&gt;So, to make your system configurable “on the go” either use some sort of config provider, or simply put everything into ENV-variables with default values. And voila, more sleep for your really tired brain that night!&lt;/p&gt;

&lt;p&gt;Oh, and of course it (ENV-variables, config providers, etc.) well worth documenting. Trust me.&lt;/p&gt;

&lt;h3 id=&quot;add-readiness-and-liveness-checks&quot;&gt;Add readiness and liveness checks&lt;/h3&gt;
&lt;p&gt;Or, as some call them, health checks. It’s not about &lt;a href=&quot;https://twitter.com/memenetes&quot;&gt;K8s&lt;/a&gt;.
Why? Your server needs to know how when your app has loaded (readiness check) and when it crashed (liveness check).
For web apps just &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;200 OK&lt;/code&gt; usually is enough for both.&lt;/p&gt;

&lt;p&gt;Then describe it in your &lt;strong&gt;exploitation documentation&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;add-custom-monitoring-endpoint&quot;&gt;Add custom monitoring endpoint&lt;/h3&gt;
&lt;p&gt;Thing is, your exploitation team already has some tool to monitor your app. Help them!&lt;/p&gt;

&lt;p&gt;You’re unsure of some really weird errors? Push those events to monitoring system! Has external systems? Check them!&lt;/p&gt;

&lt;p&gt;We (on projects I developed) used &lt;code class=&quot;highlighter-rouge&quot;&gt;/healthcheck&lt;/code&gt; with this content:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db ok
smtp ok
rabbitmq ok
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Again, put that into &lt;strong&gt;exploitation documentation&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;describe-every-service&quot;&gt;Describe every service&lt;/h3&gt;
&lt;p&gt;Use DBMS? Has web server? Send emails? Describe it!&lt;/p&gt;

&lt;p&gt;For every service you should describe:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Where to get. Code? Docker/rkt images? RPM-packages?&lt;/li&gt;
  &lt;li&gt;How to start: commands and arguments, flags, etc.&lt;/li&gt;
  &lt;li&gt;What to do at first start. Like putting in some seed data with specific command.&lt;/li&gt;
  &lt;li&gt;Dependencies. I bet you don’t want to start your app-server before DB.&lt;/li&gt;
  &lt;li&gt;Scalability. It’s easy to (auto)scale web service, but (auto)scaling DBMS is a painfull experience.&lt;/li&gt;
  &lt;li&gt;Resources required. Memory, CPU, hard drives, sockets, inodes.&lt;/li&gt;
  &lt;li&gt;Backups. What and how to backup and how to restore it.&lt;/li&gt;
  &lt;li&gt;Purpose. What that thing exactly do. So when something doesnt work one can just restart that exact service.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And remember: what you may call an “app” within your development team is a service too. Yep, rails-loaded puma is &lt;strong&gt;an http service&lt;/strong&gt; worth describing. Phoenix-loaded cowboy is &lt;strong&gt;an http service&lt;/strong&gt;. &lt;del&gt;Spring-loaded java instance &lt;em&gt;is a bad idea java is bad get rid of it like right now&lt;/em&gt;&lt;/del&gt;.&lt;/p&gt;

&lt;h3 id=&quot;networking&quot;&gt;Networking&lt;/h3&gt;
&lt;p&gt;What services are exposed to the world and what connectivity your services require (interconnections, infranet endpoints). That’s some important info for bootstrapping whatever you shitcoded for months.&lt;/p&gt;

&lt;h3 id=&quot;handles&quot;&gt;Handles&lt;/h3&gt;
&lt;p&gt;Have script to wash it out? Internal buttons to rebuild caches?&lt;br /&gt;
If not, make em.&lt;br /&gt;
Then describe em.&lt;/p&gt;

&lt;h2 id=&quot;some-sort-of-conclusion&quot;&gt;Some sort of conclusion&lt;/h2&gt;
&lt;p&gt;Do that and beyond. Do not just write code — build exploitable services instead. &lt;a href=&quot;https://en.wikipedia.org/wiki/Mr._Garrison&quot;&gt;Mkay?&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Introduction This post is mostly for those careless whisperers programmers who write code with no care for exploitation. What is exploitation? Wiktionary defines exploitation as “The act of utilizing something”. So how does one utilize programs? Sets it up, configures it and ensures that it runs as instruction specifies. In order to make your program exploitatable you need to provide documentation for every of these three steps. Truth is, it’s rare to see any documentation at all, so exploitation is done poorly. “It works somehow” approach. “Just reboot it” approach. All that stuff. He’re some tips on how to make web-services easy to exploitate. Here’s some well known paper on that matter, which is more declarative, formal and extensive. I do not discuss end-user installed programs, ‘cause it also requires a ton of information on distribution, which I’m not familiar with. Standardize it! By that I mean two things. Make exploitation documentation standard First, ask your exploitation department colleagues (DevOpses?). Especially if you already have some systems in exploitation (i.e. in production). What they use? What information they lack? Second, inspect your projects (both in exploitation and in early develoment). Think of all common bells and whistles to be configured, some situations that may occur. You may think your system is easy to understand for everybody. Truth is, it’s not. After all common information gathered write a template of exploitation docs and show it to everybody. Discuss it, improve it. But do not “carve this template in stone”. After every incident (especially post mortems) think of adding some things that could help exploitation team make it through harsh times without your help. Amend (but wisely!) it. Remove unused things. Make it mandatory for every developer This is a bit more difficult. If you’re on team lead/manager/big boss position, use your power to make documenting exploitation mandatory. If not, use social engineering, meritocracy, your boss, your reputation. Become an asshole. But force everybody to write that. Trust me, it will save your sleep at night (especially if you’re team lead/manager). Make your system exploitatable That’s complicated too. All that 12-factor apps stuff (and beyond) goes here. Environment configuration files First thing I encountered countless times is “environment configuration file”. God, please, get rid of it! If your config folder contains more than production and derived from it development and test configs, you’ve done bad. Just imagine, what could happen if at 1:00 AM your DB server crashes without any chance to restore, but exploitation guys can quickly (within SLA time!) restore it with different IP address/domain name. How could you change your DB hostname on the go without redeploying your app if you have it (DB hostname) in git-controlled folder with no chance to change it “on the go”? Sleepless night will suddenly get into your life =) So, to make your system configurable “on the go” either use some sort of config provider, or simply put everything into ENV-variables with default values. And voila, more sleep for your really tired brain that night! Oh, and of course it (ENV-variables, config providers, etc.) well worth documenting. Trust me. Add readiness and liveness checks Or, as some call them, health checks. It’s not about K8s. Why? Your server needs to know how when your app has loaded (readiness check) and when it crashed (liveness check). For web apps just / with 200 OK usually is enough for both. Then describe it in your exploitation documentation. Add custom monitoring endpoint Thing is, your exploitation team already has some tool to monitor your app. Help them! You’re unsure of some really weird errors? Push those events to monitoring system! Has external systems? Check them! We (on projects I developed) used /healthcheck with this content: db ok smtp ok rabbitmq ok Again, put that into exploitation documentation. Describe every service Use DBMS? Has web server? Send emails? Describe it! For every service you should describe: Where to get. Code? Docker/rkt images? RPM-packages? How to start: commands and arguments, flags, etc. What to do at first start. Like putting in some seed data with specific command. Dependencies. I bet you don’t want to start your app-server before DB. Scalability. It’s easy to (auto)scale web service, but (auto)scaling DBMS is a painfull experience. Resources required. Memory, CPU, hard drives, sockets, inodes. Backups. What and how to backup and how to restore it. Purpose. What that thing exactly do. So when something doesnt work one can just restart that exact service. And remember: what you may call an “app” within your development team is a service too. Yep, rails-loaded puma is an http service worth describing. Phoenix-loaded cowboy is an http service. Spring-loaded java instance is a bad idea java is bad get rid of it like right now. Networking What services are exposed to the world and what connectivity your services require (interconnections, infranet endpoints). That’s some important info for bootstrapping whatever you shitcoded for months. Handles Have script to wash it out? Internal buttons to rebuild caches? If not, make em. Then describe em. Some sort of conclusion Do that and beyond. Do not just write code — build exploitable services instead. Mkay?</summary></entry><entry xml:lang="ru"><title type="html">Авторизация в MVC-приложениях</title><link href="https://ivalentinee.github.io/ru/programming/2019/05/04/MVC-authorization.html" rel="alternate" type="text/html" title="Авторизация в MVC-приложениях" /><published>2019-05-04T00:00:00+00:00</published><updated>2019-05-04T00:00:00+00:00</updated><id>https://ivalentinee.github.io/ru/programming/2019/05/04/MVC-authorization</id><content type="html" xml:base="https://ivalentinee.github.io/ru/programming/2019/05/04/MVC-authorization.html">&lt;h2 id=&quot;предисловие&quot;&gt;Предисловие&lt;/h2&gt;

&lt;p&gt;Как-то давно у моего коллеги всплыл вопрос про организацию авторизации. Вступили мы с ним в диалог, в рамках которого я предложил некоторую теоретическую модель. Относительно недавно мне и самому пришлось делать похожую систему авторизации на проекте, и я взглянул на это всё с практической точки зрения. Посему хочу поделиться с &lt;del&gt;миром&lt;/del&gt; &lt;del&gt;читателями&lt;/del&gt; самим собой размышлениями на эту тему.&lt;/p&gt;

&lt;p&gt;Перед прочтением рекомендую ознакомиться с &lt;a href=&quot;/ru/programming/2018/06/26/authorization-authentication-and-identification.html&quot;&gt;понятием авторизации&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Умных книжек на тему авторизации я не читал. Если у вас есть возможность, лучше прочитайте умные книжки, а не этот пост.&lt;/p&gt;

&lt;h2 id=&quot;подбиваем-базу&quot;&gt;Подбиваем базу&lt;/h2&gt;
&lt;p&gt;Определимся, какие сущности у нас участвуют в авторизации (т.е. в процессе определения доступа к совершению действия), и как определяется сама авторизация.&lt;/p&gt;

&lt;h3 id=&quot;система&quot;&gt;Система&lt;/h3&gt;
&lt;p&gt;В широком смысле — вся система, с которой производится взаимодействие.&lt;/p&gt;

&lt;p&gt;В узком смысле — тот модуль, который осуществляет авторизацию.&lt;/p&gt;

&lt;p&gt;Стоит добавить, что чаще всего реакцией на отрицательный результат авторизации занимается тот же модуль. Но это скорее из-за удобства, потому что в идеале этим должен заниматься модуль ввода-вывода.&lt;/p&gt;

&lt;h4 id=&quot;модуль-ввода-вывода&quot;&gt;Модуль ввода-вывода&lt;/h4&gt;
&lt;p&gt;В случае MVC приложений этим модулем будет связка view и controller. К чему нас это приведёт, увидим позже.&lt;/p&gt;

&lt;h3 id=&quot;субъект&quot;&gt;Субъект&lt;/h3&gt;
&lt;p&gt;Тот, кто совершает операцию.&lt;/p&gt;

&lt;p&gt;При этом есть &lt;strong&gt;внешний субъект&lt;/strong&gt; — тот самый человек (или не человек), который взаимодействует с системой.&lt;/p&gt;

&lt;p&gt;Есть &lt;strong&gt;внутренний субъект&lt;/strong&gt; — объект внутри системы, который отвечает за отображение &lt;strong&gt;внешнего субъекта&lt;/strong&gt;. Чаще всего это запись о пользователе.&lt;/p&gt;

&lt;p&gt;Так как за отображение внешнего субъекта во внутренний отвечает аутентификация, рассматривать этот вопрос в статье не будем, а предположим, что отображение уже совершено (и это всегда так и есть) и под &lt;strong&gt;субъектом&lt;/strong&gt; будем подразумевать &lt;strong&gt;внутреннего субъекта&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Далее &lt;strong&gt;субъект&lt;/strong&gt; может обозначаться как &lt;strong&gt;s&lt;/strong&gt; (&lt;script type=&quot;math/tex&quot;&gt;s ∈ S&lt;/script&gt;).&lt;/p&gt;

&lt;h3 id=&quot;действие&quot;&gt;Действие&lt;/h3&gt;
&lt;p&gt;То, что хочет совершить &lt;strong&gt;субъект&lt;/strong&gt; в системе. Типичное действие в мире веба (и не только) — одна из &lt;a href=&quot;https://ru.wikipedia.org/wiki/CRUD&quot;&gt;CRUD-операций&lt;/a&gt;. Но, конечно, действия могут быть любыми. Например распечатка документа на принтере. Или запуск ядерной ракеты.&lt;/p&gt;

&lt;p&gt;Далее &lt;strong&gt;действие&lt;/strong&gt; может обозначаться как &lt;strong&gt;a&lt;/strong&gt; (&lt;script type=&quot;math/tex&quot;&gt;a ∈ A&lt;/script&gt;).&lt;/p&gt;

&lt;p&gt;Как и субъект, действие внешнее отображается в действие внутрненнее.&lt;/p&gt;

&lt;h3 id=&quot;объект&quot;&gt;Объект&lt;/h3&gt;
&lt;p&gt;То, над чем &lt;strong&gt;субъект&lt;/strong&gt; хочет совершить &lt;strong&gt;действие&lt;/strong&gt;. Например, пользователь хочет удалить свой комментарий. В данном случае комментарий — и есть &lt;strong&gt;объект&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Под &lt;strong&gt;объектом&lt;/strong&gt; (&lt;script type=&quot;math/tex&quot;&gt;o ∈ O&lt;/script&gt;) в рамках данной статейки будем понимать &lt;strong&gt;объект авторизации&lt;/strong&gt;. Но тут важно понимать, что &lt;strong&gt;объектом авторизации&lt;/strong&gt; может в разных условиях быть как один &lt;strong&gt;объект системы&lt;/strong&gt; (&lt;script type=&quot;math/tex&quot;&gt;so ∈ SO&lt;/script&gt;), так и несколько. Пример с ядерной ракетой: если пользователь хочет запустить ракету с точкой назначения “Вашингтон”, то &lt;strong&gt;объектом авторизации&lt;/strong&gt; может быть как конкретная “ядерная ракета”, так и “Вашингтон”, и даже оба одновременно.&lt;/p&gt;

&lt;p&gt;При этом объектом авторизации может являться как один объект системы, так и несколько. Но для устранения неоднозначности каждый такой &lt;strong&gt;объект авторизации&lt;/strong&gt; должен содержать уникальный набор &lt;strong&gt;объектов системы&lt;/strong&gt;. То есть &lt;strong&gt;объект авторизации&lt;/strong&gt; является уникальным подмножеством всех объектов системы:
&lt;script type=&quot;math/tex&quot;&gt;O = \{o | o ⊆ SO\}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Также как и субъекты, объекты рассматриваем только внутренние.&lt;/p&gt;

&lt;h3 id=&quot;политика-правила-авторизации&quot;&gt;Политика (правила) авторизации&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Политикой&lt;/strong&gt; или &lt;strong&gt;набором правил&lt;/strong&gt; авторизации будем называть некоторый предикат &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;, на основании которого можно определить, имеет ли возможность &lt;strong&gt;субъект&lt;/strong&gt; совершить &lt;strong&gt;действие&lt;/strong&gt; над &lt;strong&gt;объектом&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Из указанного определения следует, что областью определения предиката является декартово произведение множеств &lt;strong&gt;субъектов&lt;/strong&gt;, &lt;strong&gt;действий&lt;/strong&gt; и &lt;strong&gt;объектов&lt;/strong&gt; (&lt;script type=&quot;math/tex&quot;&gt;D_p = S × A × O&lt;/script&gt;).&lt;/p&gt;

&lt;h4 id=&quot;чёрные-и-белые-списки&quot;&gt;Чёрные и белые списки&lt;/h4&gt;
&lt;p&gt;Для большинства этот пункт очевиден, но всё-таки я напишу.&lt;/p&gt;

&lt;p&gt;Правила могут быть двух видов: разрешающие и запрещающие. Набор разрешающих правил называется «белый список», а набор запрещающих — «чёрный список».&lt;/p&gt;

&lt;h4 id=&quot;предположение-о-замкнутости-мира-в-отношении-правил&quot;&gt;Предположение о замкнутости мира в отношении правил&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B5%D0%B4%D0%BF%D0%BE%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5_%D0%BE_%D0%B7%D0%B0%D0%BC%D0%BA%D0%BD%D1%83%D1%82%D0%BE%D1%81%D1%82%D0%B8_%D0%BC%D0%B8%D1%80%D0%B0&quot;&gt;Предположение о замкнутости мира&lt;/a&gt; для правил политики авторизации можно сформулировать так: «Если для субъекта &lt;script type=&quot;math/tex&quot;&gt;s_x ∈ S&lt;/script&gt;, действия &lt;script type=&quot;math/tex&quot;&gt;a_y ∈ A&lt;/script&gt; и объекта &lt;script type=&quot;math/tex&quot;&gt;o_z ∈ O&lt;/script&gt; не определено значение предиката p, то считаем, что высказывание &lt;script type=&quot;math/tex&quot;&gt;p(\{s_x, a_y, o_z\})&lt;/script&gt; будет ложным». Этот подход позволяет не определять правила для всех возможных случаев, а только специфицировать истиные.&lt;/p&gt;

&lt;p&gt;Можно сказать (неформально), что исходным высказыванием политики белого списка является «никому ничего нельзя», а правила указывают на исключения, в то время как исходным высказыванием политики чёрного списка является «всем всё можно», а правила указывают на исключения.&lt;/p&gt;

&lt;p&gt;Во-первых, для устранения неоднозначности следует всегда использовать только один список. В противном случае нарушается принцип замкнутости и нам надо будет писать правила для всех случаев. Такой себе вариант.&lt;/p&gt;

&lt;p&gt;Во-вторых, исходное высказывание чёрного списка является чрезвычайно опасным, потому что отсутствие а не наличие правила предоставляет доступ к действию. А отсутствие правила контролировать обычно сложнее.&lt;/p&gt;

&lt;h4 id=&quot;разбиение-предиката&quot;&gt;Разбиение предиката&lt;/h4&gt;
&lt;p&gt;Так как писать одно большое правило для всего и вся — такая себе затея (ну просто представьте себе этот безумный огромный &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;), обычно предикат разбивают на несколько меньших объединённых дизъюнкцией: &lt;script type=&quot;math/tex&quot;&gt;p := \displaystyle\bigvee_{i=1}^{n} p_i&lt;/script&gt;.&lt;/p&gt;

&lt;h4 id=&quot;выделение-групп-объектов&quot;&gt;Выделение групп объектов&lt;/h4&gt;
&lt;p&gt;Так как зачастую объекты системы являются изменяемыми данными, прописывать правило для каждой тройки &lt;script type=&quot;math/tex&quot;&gt;\{s, a, o\}&lt;/script&gt; не представляется возможным. В таком случае предикат политики авторизации описывается с помощью правил, выделяющих подмножество из &lt;script type=&quot;math/tex&quot;&gt;D_p&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Логичнее всего выделять наибольшие подмножества, которые имеют значения с точки зрения бизнеса и для каждого определять меньший предикат: &lt;script type=&quot;math/tex&quot;&gt;p(D_p) := \displaystyle\bigvee_{i=1}^{n} p_i(D_{pi}), D_{pi} ⊆ D_p&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Можно ввести требование, при котором подмножества &lt;script type=&quot;math/tex&quot;&gt;D_{pi}&lt;/script&gt; не должны пересекаться, в таком случае каждый отдельный меньший предикат &lt;script type=&quot;math/tex&quot;&gt;P_i&lt;/script&gt; будет однозначно определять, будет ли конкретный случай &lt;script type=&quot;math/tex&quot;&gt;\{s_x, a_y, o_z\} ∈ D_p&lt;/script&gt; разрешён или запрещён: &lt;script type=&quot;math/tex&quot;&gt;p(D_p) := \displaystyle\bigvee_{i=1}^{n} p_i(D_{pi}), D_{pi} ⊆ D_p, i ≠ j, D_{pi} ⊄ D_{pj}&lt;/script&gt;.&lt;/p&gt;

&lt;h2 id=&quot;общий-процесс&quot;&gt;Общий процесс&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2019-05-04-MVC-authorization/ru/Generic authorization flow.png&quot; alt=&quot;Общий процесс совершения действия с авторизацией&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;определение-субъекта&quot;&gt;Определение субъекта&lt;/h3&gt;
&lt;p&gt;Как я уже писал выше, определением (отображением внешнего во внутренний) объекта занимается процесс &lt;a href=&quot;/ru/programming/2018/06/26/authorization-authentication-and-identification.html&quot;&gt;аутентификации или идентификации&lt;/a&gt;. На обе темы написаны не только статьи, а целые книги, разработаны мегатонны технологий (&lt;a href=&quot;https://ru.wikipedia.org/wiki/Kerberos&quot;&gt;kerberos?&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security#Client-authenticated_TLS_handshake&quot;&gt;tls?&lt;/a&gt;), поэтому эта тема не стала предметом рассмотрения данной статьи.&lt;/p&gt;

&lt;h3 id=&quot;определение-объекта&quot;&gt;Определение объекта&lt;/h3&gt;
&lt;p&gt;А вот тут даже в общем случае есть что написать.&lt;/p&gt;

&lt;h4 id=&quot;идентификация&quot;&gt;Идентификация&lt;/h4&gt;
&lt;p&gt;Для большинства действий отображение объекта производится по данным, приходящим из системы ввода-вывода. Например, получение поста по его идентификатору: &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT * FROM posts WHERE id=&amp;amp;post_id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Важно заметить, что отображение происходит не на &lt;strong&gt;объект авторизации&lt;/strong&gt; (потому что внешнего объекта авторизации в явном виде нет), а на &lt;strong&gt;объект системы&lt;/strong&gt;. И уже из &lt;strong&gt;объекта системы&lt;/strong&gt; (или нескольких) определяется &lt;strong&gt;объект авторизации&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;замена-объекта-авторизации&quot;&gt;Замена объекта авторизации&lt;/h4&gt;
&lt;p&gt;В качестве сценария для рассмотрения замены &lt;strong&gt;объекта авторизации&lt;/strong&gt; можно рассмотреть добавление объекта, хотя, очевидно, данный подход можно применить для любого класса действия.&lt;br /&gt;
С добавлением объекта сложность в том, что новый объект ещё не является &lt;strong&gt;объектом системы&lt;/strong&gt; (&lt;script type=&quot;math/tex&quot;&gt;so_{new} ∉ SO&lt;/script&gt;), поэтому он не входит в область определения предиката авторизации.&lt;/p&gt;

&lt;p&gt;В таком случае можно рассматривать в качестве &lt;strong&gt;объекта авторизации&lt;/strong&gt; множество или подмножество, которое пользователь хочет изменить.&lt;/p&gt;

&lt;p&gt;Рассмотрим три случая.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Замена на пустое множество.&lt;br /&gt;
В ряде случаев нет возможности однозначно идентифицировать &lt;strong&gt;объект авторизации&lt;/strong&gt;. Для таких сценариев можно рассматривать &lt;strong&gt;множество всех объектов системы&lt;/strong&gt; (&lt;script type=&quot;math/tex&quot;&gt;SO&lt;/script&gt;) в качестве &lt;strong&gt;объекта авторизации&lt;/strong&gt;, так как действием является расширение этого множества. Но ввиду того, что такие действия де-факто не зависят от &lt;script type=&quot;math/tex&quot;&gt;SO&lt;/script&gt;, то его (&lt;script type=&quot;math/tex&quot;&gt;SO&lt;/script&gt;) можно заменить на &lt;strong&gt;пустое множество&lt;/strong&gt;.&lt;br /&gt;
Я бы предложил для такой замены название «&lt;strong&gt;нуль-замена&lt;/strong&gt;».&lt;br /&gt;
Признаком возможности такой замены является &lt;strong&gt;отсутствие идентификационных данных&lt;/strong&gt; для определения конкретного &lt;strong&gt;объекта авторизации&lt;/strong&gt;.&lt;br /&gt;
Примером такого сценария является &lt;em&gt;добавление поста&lt;/em&gt;. Пользователь либо может добавить пост, либо не может, и это никак не зависит ни от добавляемого поста, ни от других объектов в системе.&lt;/li&gt;
  &lt;li&gt;Подмножество объектов как &lt;strong&gt;объект авторизации&lt;/strong&gt;&lt;br /&gt;
Для предыдущего случая можно рассмотреть в качестве &lt;strong&gt;объекта авторизации&lt;/strong&gt; множество постов, если явно обозначен дискриминатор этого подмножества. Тогда для данного действия объектом авторизации будет (&lt;script type=&quot;math/tex&quot;&gt;o = Posts, post ∈ Posts ⊆ SO&lt;/script&gt;). Очевидно, что для данного сценария &lt;strong&gt;нуль-замена&lt;/strong&gt; не требуется.&lt;/li&gt;
  &lt;li&gt;Замена на владельца.&lt;br /&gt;
Рассмотрим добавление комментария к постам. В этом случае в качестве &lt;strong&gt;объекта авторизации&lt;/strong&gt; выступит множество комментариев к &lt;strong&gt;конкретному посту&lt;/strong&gt;. Но в таком случае, опять же, удобно делать де-факто замену &lt;strong&gt;множества комментариев к посту&lt;/strong&gt; на сам &lt;strong&gt;пост&lt;/strong&gt; как &lt;strong&gt;объект авторизации&lt;/strong&gt;. Подобно предыдущему пункту данная замена противоречит строгой теории, но позволяет сделать правила авторизации (&lt;script type=&quot;math/tex&quot;&gt;p_i(D_{pi})&lt;/script&gt;) проще и понятнее, а также лучше соответствовать внешним (бизнесовым) правилам.&lt;br /&gt;
Я бы предложил для такой замены название «&lt;strong&gt;замена объектом-владельцем&lt;/strong&gt;», потому что в данном случае множество определяется через пренадлежность какому-то другому объекту (владельцу).&lt;br /&gt;
Про каскадную замену объектом-владельцем мне лень писать, честно.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Про выбор «&lt;strong&gt;нуль-замены&lt;/strong&gt;» или &lt;strong&gt;классов объектов&lt;/strong&gt; напишу в пункте про определение действия.&lt;/p&gt;

&lt;h4 id=&quot;групповые-действия&quot;&gt;Групповые действия&lt;/h4&gt;
&lt;p&gt;Зачастую нужно произвести действие сразу с несколькими объектами. В данном случае ответом на групповое действие, очевидно, будет конъюнкция из атомарных действий:
&lt;script type=&quot;math/tex&quot;&gt;p_{group} = \displaystyle\bigwedge_{i=1}^k p_i&lt;/script&gt;.&lt;/p&gt;

&lt;h3 id=&quot;определение-действия&quot;&gt;Определение действия&lt;/h3&gt;
&lt;p&gt;В общем случае отображение действия полностью зависит от системы ввода-вывода. Но есть повод рассмотреть определение базового класса объектов для действий.&lt;/p&gt;

&lt;p&gt;Для действий «добавить комментарий к посту №2», «изменить пост №3», «распечатать отчёт о всех моих постах», «запустить ядерную ракету в направлении Вашингтона» рассмотрим два подхода.&lt;/p&gt;

&lt;h4 id=&quot;широкие-действия&quot;&gt;«Широкие» действия&lt;/h4&gt;
&lt;p&gt;В таком случае действия могут описываться как «добавить», «изменить», «распечатать», «запустить». А классы &lt;strong&gt;объектов системы&lt;/strong&gt; будут либо выводиться на уровне идентификации, либо поступать в качестве данных.&lt;/p&gt;

&lt;p&gt;Для широких действий возможно два вида идентификации объектов: идентификация одного &lt;strong&gt;объекта системы&lt;/strong&gt; и идентификация &lt;strong&gt;подмножества объектов системы&lt;/strong&gt; (которые можно называть «классами объектов системы»). Примером такого класса может быть класс постов.&lt;/p&gt;

&lt;h4 id=&quot;узкие-действия&quot;&gt;«Узкие» действия&lt;/h4&gt;
&lt;p&gt;«Узкие» действия описываются как «добавить комментарий к посту», «изменить пост», «распечатать отчёт о всех моих постах», «запустить ракету в направлении города». Очевидно, что в отличии от «широких» действий класс объектов уже включён в само действие, а потому повторное его использование для специфицирования области не требуется.&lt;/p&gt;

&lt;h4 id=&quot;выбор-между-узкими-и-широкими-действиями&quot;&gt;Выбор между узкими и широкими действиями&lt;/h4&gt;
&lt;p&gt;Не смотря на то, что подходы рассмотрены отдельно, в реальных программах предикат может быть одновременно и «узким» и «широким», специфицируя условие и в самом действии и в идентификаторах объектов системы.&lt;/p&gt;

&lt;h2 id=&quot;применительно-к-реальному-миру&quot;&gt;Применительно к реальному миру&lt;/h2&gt;
&lt;p&gt;Теперь можно поговорить про типичные MVC-web приложения.&lt;/p&gt;

&lt;p&gt;Тут я буду исходить из модульной &lt;a href=&quot;https://github.com/rack/rack&quot;&gt;rack&lt;/a&gt;-/&lt;a href=&quot;https://github.com/elixir-plug/plug&quot;&gt;plug&lt;/a&gt;-style системы.&lt;/p&gt;

&lt;p&gt;Чаще всего (хотя можно и по-другому) используется такая схема:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2019-05-04-MVC-authorization/ru/MVC authorization.png&quot; alt=&quot;Совершение действия с авторизацией в MVC&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;а-где-объект-авторизации&quot;&gt;А где объект авторизации?&lt;/h3&gt;
&lt;p&gt;Это была первая проблема, с которой я столкнулся, когда понадобилась полноценная система авторизации.&lt;/p&gt;

&lt;p&gt;Большая часть предлагаемых решений работают на основе предиката &lt;script type=&quot;math/tex&quot;&gt;p(\{s, a\}), \{s, a\} ∈ S×A&lt;/script&gt; вместо &lt;script type=&quot;math/tex&quot;&gt;p(\{s, a, o\})&lt;/script&gt;. Компенсируется это обычно за счёт использования «узких» действий и исключения объектов авторизации из области определения предиката.&lt;br /&gt;
Очевидно, что в таком случае нет никакого способа запретить действия, которые действительно зависят от объекта авторизации. Пример: «Пользователи, которые не являются администраторами не имеют права редактировать и удалять не свои посты».&lt;/p&gt;

&lt;h4 id=&quot;как-можно-обойтись-без-объекта-авторизации&quot;&gt;Как можно обойтись без объекта авторизации&lt;/h4&gt;
&lt;p&gt;На самом деле можно обойтись без объекта авторизации, перенося политику авторизации на уровень логики приложения.&lt;/p&gt;

&lt;p&gt;Для указанного выше примера удаление логически делается только среди собственных постов: &lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE FROM posts WHERE author_id=&amp;amp;current_user_id AND id=&amp;amp;post_id&lt;/code&gt;.&lt;br /&gt;
А для администраторов добавляется отдельный доступный только им список постов, где можно делать всё что угодно.&lt;/p&gt;

&lt;p&gt;Проблемы, как видно из примера, две:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Действия приходится делать очень «узкими», чтобы с помощью субъекта и действия можно было как-то ограничивать доступ.&lt;/li&gt;
  &lt;li&gt;Там, где такой способ не позволяет полностью контролировать действие, ограничение переносится на уровень логики работы.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;И если в первом случае ещё нет явных проблем (хотя архитектура интерфейса страдает), вторая проблема куда хуже.&lt;/p&gt;

&lt;p&gt;Перенося разграничение прав на уровень логики мы &lt;strong&gt;разделяем одно бизнес правило (нельзя/можно что-то делать) на несколько высказываний в коде&lt;/strong&gt;.&lt;br /&gt;
Таким образом программист, который откроет оригинальную задачу в трекере и начнёт искать соответствующий код в политиках авторизации может потратить на поиск ответственного участка кода больше времени.&lt;br /&gt;
Ну и бонусом: пользователь вместо ошибки 403 получит ошибку 404. Хотя чаще всего это не сильно портит проектирование интерфейса.&lt;/p&gt;

&lt;h4 id=&quot;всё-таки-получаем-объект-авторизации&quot;&gt;Всё-таки получаем объект авторизации&lt;/h4&gt;
&lt;p&gt;Казалось бы, на схеме всё исправляется просто:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2019-05-04-MVC-authorization/ru/MVC authorization with object.png&quot; alt=&quot;Совершение действия с авторизацией и объектом в MVC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Но в действительности теперь надо делать &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; в не в контроллере, а до него.&lt;/p&gt;

&lt;p&gt;В модульной системе всё достаточно просто: добавляем перед контроллером и модулем авторизации блок, который предзагружает данные, а затем в контроллере делаем на пару селектов меньше:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PostController&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:controller&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Plugs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PreloadObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;function:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preload_post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;as:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;ow&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Plugs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Authorization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;for:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preload_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;id&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;В данном случае &lt;code class=&quot;highlighter-rouge&quot;&gt;App.Plugs.PreloadObject&lt;/code&gt; использует указанную функцию загрузки и складывает объект авторизации в &lt;code class=&quot;highlighter-rouge&quot;&gt;conn&lt;/code&gt;, а затем &lt;code class=&quot;highlighter-rouge&quot;&gt;App.Plugs.Authorization&lt;/code&gt; на основе этого объекта и правил авторизации определяет, можно ли выполнять действие.&lt;/p&gt;

&lt;p&gt;Преимущества такого подхода очевидны:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Получаем возможность полноценно определить предикат &lt;script type=&quot;math/tex&quot;&gt;p(\{s, a, o\})&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;Ошибки 404 и 403 теперь чётко разграничены.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Теперь о недостатках:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Теперь контроллер — не единственная точка работы с данными на пути обработки запроса! Если поменяется код работы (в частности &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt;) с постами — надо будет идти потенциально в два места.&lt;/li&gt;
  &lt;li&gt;Теперь при определении полноценного предиката нет возможности проверить доступность до получения объекта. И хотя это — то, к чему мы осознанно шли, в высоконагруженных системах такое поведение может значительно добавить нагрузки в тех сценариях, когда большая часть запросов может быть отвергнута с использованием &lt;script type=&quot;math/tex&quot;&gt;p(\{s, a\})&lt;/script&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;использование-полноценного-предиката-до-отображения-объекта-авторизации&quot;&gt;Использование полноценного предиката до отображения объекта авторизации&lt;/h4&gt;
&lt;p&gt;Теоретическая возможность сделать двухэтапную авторизацию для высоконагруженных систем есть: достаточно свести предикат в области &lt;script type=&quot;math/tex&quot;&gt;S×A×O&lt;/script&gt; к предикату в области &lt;script type=&quot;math/tex&quot;&gt;S×A&lt;/script&gt;, но&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Это приведёт к поддержке в коде двух предикатов вместо одного. А в действительности это будет поддержка &lt;script type=&quot;math/tex&quot;&gt;2·n&lt;/script&gt; меньших предикатов вместо &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;&lt;br /&gt;
&lt;script type=&quot;math/tex&quot;&gt;\displaystyle\bigvee_{i=1}^{n} {p_{i}(\{s, a\}) ∧ p_i(\{s, a, o\})}&lt;/script&gt; вместо &lt;script type=&quot;math/tex&quot;&gt;\displaystyle\bigvee_{i=1}^{n} p_i(\{s, a, o\})&lt;/script&gt;).&lt;/li&gt;
  &lt;li&gt;На практике я такого не делал, поэтому про подводные камни рассказать не могу.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;определение-действия-1&quot;&gt;Определение действия&lt;/h3&gt;
&lt;p&gt;Тут тоже есть свои особенности в реальных системах.&lt;/p&gt;

&lt;p&gt;Проблема в том, что отображение действия происходит не один раз: сначала внешнее действие отображается на внутреннее на уровне контроллера, потом контроллер отображает это на одно (или несколько) действий модуля бизнес-логики, которые уже отображают свои действия на действия уровня данных или низкоуровневые процедуры (например, печать).&lt;/p&gt;

&lt;p&gt;И тут встаёт проблема выбора уровня отображаемых действий для авторизации.&lt;/p&gt;

&lt;p&gt;Типичные библиотеки для описания авторизации (как минимум &lt;a href=&quot;https://github.com/varvet/pundit&quot;&gt;рельсовые&lt;/a&gt;) переносят это на уровень бизнес-логики (а с active record этот слой ещё и смешан со слоем хранения).&lt;/p&gt;

&lt;p&gt;Я же считаю, что для авторизации нужно использовать отображение как можно более близкое к вводу, потому что&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Отображение уровня контроллера позволяет делать действия бизнес-логики и работы с данными максимально широкими, что уменьшает количество дублируемого кода и позволяет выстроить достаточно высокоуровневые абстракции.&lt;/li&gt;
  &lt;li&gt;В то же время действия уровня контроллера можно делать максимально узкими для построения минимально-необходимого интерфейса (что уменьшает уровень энтропии интерфейса).&lt;/li&gt;
  &lt;li&gt;Авторизация не будет «ломаться», если одно действие уровня контроллера будет отображатся на несколько действий более низкого уровня.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Но в общем и целом, помня про текучие абстрации, можно руководствоваться подходом, при котором предикат будет иметь наименее объёмное определение. В частности иногда есть смысл авторизовать действие на уровне бизнес-логики, а не на уровне контроллера.&lt;/p&gt;

&lt;h3 id=&quot;обратная-авторизация-и-логически-недоступные-действия&quot;&gt;Обратная авторизация и логически недоступные действия&lt;/h3&gt;
&lt;p&gt;Вот сейчас я буду рассказывать про откровенный костыль, но мне пришлось на это пойти.&lt;/p&gt;

&lt;p&gt;Кроме авторизации зачастую встаёт вопрос «обратной авторизации» — когда нужно не ответить отказом/успехом на попытку действия, а предоставить список доступных действий.&lt;/p&gt;

&lt;p&gt;Я использовал такой подход: брал список вообще всех действий и применял к ним предикат с текущими субъектом и объектом.&lt;/p&gt;

&lt;p&gt;Способ полностью работал. Но проблема была в том, что кнопку нужно было задизейблить не только когда пользователю нельзя чего-то сделать, но и когда действие было логически невозможным.&lt;/p&gt;

&lt;p&gt;Тут есть два варианта:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Составить предикат логически недоступных действий и конънктивно применять его вместе с предикатом авторизации.&lt;/li&gt;
  &lt;li&gt;Учесть логическую невозможность действия в авторизации.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Позор мне, я выбрал второй способ. Чреват он двумя выхлопами:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Разделить правила логические и политические в определении предиката невозможно. Это очень плохо.&lt;/li&gt;
  &lt;li&gt;Авторизационный предикат разрастается в объёме на k логических условий для каждого из авторизационных (условий): &lt;script type=&quot;math/tex&quot;&gt;\displaystyle\bigvee_{i=1}^{n} {\displaystyle\bigvee_{j=1}^{k_i} p_{ij}(\{s, a, o\})}&lt;/script&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;заключение&quot;&gt;Заключение&lt;/h2&gt;
&lt;p&gt;Авторизация в простых приложениях — достаточно простой предмет. Основная проблема почти всегда заключается в подходе, а не в теоретической ёмкости проблемы.&lt;/p&gt;

&lt;p&gt;Но при этом многие (в т.ч. и я зачастую) делают авторизацию в MVC-приложениях исходя исключительно из практики, «как получится», что приводит к проблемам гибкости и корректности.&lt;/p&gt;</content><author><name></name></author><summary type="html">Предисловие Как-то давно у моего коллеги всплыл вопрос про организацию авторизации. Вступили мы с ним в диалог, в рамках которого я предложил некоторую теоретическую модель. Относительно недавно мне и самому пришлось делать похожую систему авторизации на проекте, и я взглянул на это всё с практической точки зрения. Посему хочу поделиться с миром читателями самим собой размышлениями на эту тему. Перед прочтением рекомендую ознакомиться с понятием авторизации. Умных книжек на тему авторизации я не читал. Если у вас есть возможность, лучше прочитайте умные книжки, а не этот пост. Подбиваем базу Определимся, какие сущности у нас участвуют в авторизации (т.е. в процессе определения доступа к совершению действия), и как определяется сама авторизация. Система В широком смысле — вся система, с которой производится взаимодействие. В узком смысле — тот модуль, который осуществляет авторизацию. Стоит добавить, что чаще всего реакцией на отрицательный результат авторизации занимается тот же модуль. Но это скорее из-за удобства, потому что в идеале этим должен заниматься модуль ввода-вывода. Модуль ввода-вывода В случае MVC приложений этим модулем будет связка view и controller. К чему нас это приведёт, увидим позже. Субъект Тот, кто совершает операцию. При этом есть внешний субъект — тот самый человек (или не человек), который взаимодействует с системой. Есть внутренний субъект — объект внутри системы, который отвечает за отображение внешнего субъекта. Чаще всего это запись о пользователе. Так как за отображение внешнего субъекта во внутренний отвечает аутентификация, рассматривать этот вопрос в статье не будем, а предположим, что отображение уже совершено (и это всегда так и есть) и под субъектом будем подразумевать внутреннего субъекта. Далее субъект может обозначаться как s (). Действие То, что хочет совершить субъект в системе. Типичное действие в мире веба (и не только) — одна из CRUD-операций. Но, конечно, действия могут быть любыми. Например распечатка документа на принтере. Или запуск ядерной ракеты. Далее действие может обозначаться как a (). Как и субъект, действие внешнее отображается в действие внутрненнее. Объект То, над чем субъект хочет совершить действие. Например, пользователь хочет удалить свой комментарий. В данном случае комментарий — и есть объект. Под объектом () в рамках данной статейки будем понимать объект авторизации. Но тут важно понимать, что объектом авторизации может в разных условиях быть как один объект системы (), так и несколько. Пример с ядерной ракетой: если пользователь хочет запустить ракету с точкой назначения “Вашингтон”, то объектом авторизации может быть как конкретная “ядерная ракета”, так и “Вашингтон”, и даже оба одновременно. При этом объектом авторизации может являться как один объект системы, так и несколько. Но для устранения неоднозначности каждый такой объект авторизации должен содержать уникальный набор объектов системы. То есть объект авторизации является уникальным подмножеством всех объектов системы: Также как и субъекты, объекты рассматриваем только внутренние. Политика (правила) авторизации Политикой или набором правил авторизации будем называть некоторый предикат , на основании которого можно определить, имеет ли возможность субъект совершить действие над объектом. Из указанного определения следует, что областью определения предиката является декартово произведение множеств субъектов, действий и объектов (). Чёрные и белые списки Для большинства этот пункт очевиден, но всё-таки я напишу. Правила могут быть двух видов: разрешающие и запрещающие. Набор разрешающих правил называется «белый список», а набор запрещающих — «чёрный список». Предположение о замкнутости мира в отношении правил Предположение о замкнутости мира для правил политики авторизации можно сформулировать так: «Если для субъекта , действия и объекта не определено значение предиката p, то считаем, что высказывание будет ложным». Этот подход позволяет не определять правила для всех возможных случаев, а только специфицировать истиные. Можно сказать (неформально), что исходным высказыванием политики белого списка является «никому ничего нельзя», а правила указывают на исключения, в то время как исходным высказыванием политики чёрного списка является «всем всё можно», а правила указывают на исключения. Во-первых, для устранения неоднозначности следует всегда использовать только один список. В противном случае нарушается принцип замкнутости и нам надо будет писать правила для всех случаев. Такой себе вариант. Во-вторых, исходное высказывание чёрного списка является чрезвычайно опасным, потому что отсутствие а не наличие правила предоставляет доступ к действию. А отсутствие правила контролировать обычно сложнее. Разбиение предиката Так как писать одно большое правило для всего и вся — такая себе затея (ну просто представьте себе этот безумный огромный if), обычно предикат разбивают на несколько меньших объединённых дизъюнкцией: . Выделение групп объектов Так как зачастую объекты системы являются изменяемыми данными, прописывать правило для каждой тройки не представляется возможным. В таком случае предикат политики авторизации описывается с помощью правил, выделяющих подмножество из . Логичнее всего выделять наибольшие подмножества, которые имеют значения с точки зрения бизнеса и для каждого определять меньший предикат: Можно ввести требование, при котором подмножества не должны пересекаться, в таком случае каждый отдельный меньший предикат будет однозначно определять, будет ли конкретный случай разрешён или запрещён: . Общий процесс Определение субъекта Как я уже писал выше, определением (отображением внешнего во внутренний) объекта занимается процесс аутентификации или идентификации. На обе темы написаны не только статьи, а целые книги, разработаны мегатонны технологий (kerberos?, tls?), поэтому эта тема не стала предметом рассмотрения данной статьи. Определение объекта А вот тут даже в общем случае есть что написать. Идентификация Для большинства действий отображение объекта производится по данным, приходящим из системы ввода-вывода. Например, получение поста по его идентификатору: SELECT * FROM posts WHERE id=&amp;amp;post_id. Важно заметить, что отображение происходит не на объект авторизации (потому что внешнего объекта авторизации в явном виде нет), а на объект системы. И уже из объекта системы (или нескольких) определяется объект авторизации. Замена объекта авторизации В качестве сценария для рассмотрения замены объекта авторизации можно рассмотреть добавление объекта, хотя, очевидно, данный подход можно применить для любого класса действия. С добавлением объекта сложность в том, что новый объект ещё не является объектом системы (), поэтому он не входит в область определения предиката авторизации. В таком случае можно рассматривать в качестве объекта авторизации множество или подмножество, которое пользователь хочет изменить. Рассмотрим три случая. Замена на пустое множество. В ряде случаев нет возможности однозначно идентифицировать объект авторизации. Для таких сценариев можно рассматривать множество всех объектов системы () в качестве объекта авторизации, так как действием является расширение этого множества. Но ввиду того, что такие действия де-факто не зависят от , то его () можно заменить на пустое множество. Я бы предложил для такой замены название «нуль-замена». Признаком возможности такой замены является отсутствие идентификационных данных для определения конкретного объекта авторизации. Примером такого сценария является добавление поста. Пользователь либо может добавить пост, либо не может, и это никак не зависит ни от добавляемого поста, ни от других объектов в системе. Подмножество объектов как объект авторизации Для предыдущего случая можно рассмотреть в качестве объекта авторизации множество постов, если явно обозначен дискриминатор этого подмножества. Тогда для данного действия объектом авторизации будет (). Очевидно, что для данного сценария нуль-замена не требуется. Замена на владельца. Рассмотрим добавление комментария к постам. В этом случае в качестве объекта авторизации выступит множество комментариев к конкретному посту. Но в таком случае, опять же, удобно делать де-факто замену множества комментариев к посту на сам пост как объект авторизации. Подобно предыдущему пункту данная замена противоречит строгой теории, но позволяет сделать правила авторизации () проще и понятнее, а также лучше соответствовать внешним (бизнесовым) правилам. Я бы предложил для такой замены название «замена объектом-владельцем», потому что в данном случае множество определяется через пренадлежность какому-то другому объекту (владельцу). Про каскадную замену объектом-владельцем мне лень писать, честно. Про выбор «нуль-замены» или классов объектов напишу в пункте про определение действия. Групповые действия Зачастую нужно произвести действие сразу с несколькими объектами. В данном случае ответом на групповое действие, очевидно, будет конъюнкция из атомарных действий: . Определение действия В общем случае отображение действия полностью зависит от системы ввода-вывода. Но есть повод рассмотреть определение базового класса объектов для действий. Для действий «добавить комментарий к посту №2», «изменить пост №3», «распечатать отчёт о всех моих постах», «запустить ядерную ракету в направлении Вашингтона» рассмотрим два подхода. «Широкие» действия В таком случае действия могут описываться как «добавить», «изменить», «распечатать», «запустить». А классы объектов системы будут либо выводиться на уровне идентификации, либо поступать в качестве данных. Для широких действий возможно два вида идентификации объектов: идентификация одного объекта системы и идентификация подмножества объектов системы (которые можно называть «классами объектов системы»). Примером такого класса может быть класс постов. «Узкие» действия «Узкие» действия описываются как «добавить комментарий к посту», «изменить пост», «распечатать отчёт о всех моих постах», «запустить ракету в направлении города». Очевидно, что в отличии от «широких» действий класс объектов уже включён в само действие, а потому повторное его использование для специфицирования области не требуется. Выбор между узкими и широкими действиями Не смотря на то, что подходы рассмотрены отдельно, в реальных программах предикат может быть одновременно и «узким» и «широким», специфицируя условие и в самом действии и в идентификаторах объектов системы. Применительно к реальному миру Теперь можно поговорить про типичные MVC-web приложения. Тут я буду исходить из модульной rack-/plug-style системы. Чаще всего (хотя можно и по-другому) используется такая схема: А где объект авторизации? Это была первая проблема, с которой я столкнулся, когда понадобилась полноценная система авторизации. Большая часть предлагаемых решений работают на основе предиката вместо . Компенсируется это обычно за счёт использования «узких» действий и исключения объектов авторизации из области определения предиката. Очевидно, что в таком случае нет никакого способа запретить действия, которые действительно зависят от объекта авторизации. Пример: «Пользователи, которые не являются администраторами не имеют права редактировать и удалять не свои посты». Как можно обойтись без объекта авторизации На самом деле можно обойтись без объекта авторизации, перенося политику авторизации на уровень логики приложения. Для указанного выше примера удаление логически делается только среди собственных постов: DELETE FROM posts WHERE author_id=&amp;amp;current_user_id AND id=&amp;amp;post_id. А для администраторов добавляется отдельный доступный только им список постов, где можно делать всё что угодно. Проблемы, как видно из примера, две: Действия приходится делать очень «узкими», чтобы с помощью субъекта и действия можно было как-то ограничивать доступ. Там, где такой способ не позволяет полностью контролировать действие, ограничение переносится на уровень логики работы. И если в первом случае ещё нет явных проблем (хотя архитектура интерфейса страдает), вторая проблема куда хуже. Перенося разграничение прав на уровень логики мы разделяем одно бизнес правило (нельзя/можно что-то делать) на несколько высказываний в коде. Таким образом программист, который откроет оригинальную задачу в трекере и начнёт искать соответствующий код в политиках авторизации может потратить на поиск ответственного участка кода больше времени. Ну и бонусом: пользователь вместо ошибки 403 получит ошибку 404. Хотя чаще всего это не сильно портит проектирование интерфейса. Всё-таки получаем объект авторизации Казалось бы, на схеме всё исправляется просто: Но в действительности теперь надо делать select в не в контроллере, а до него. В модульной системе всё достаточно просто: добавляем перед контроллером и модулем авторизации блок, который предзагружает данные, а затем в контроллере делаем на пару селектов меньше: defmodule App.PostController do use App, :controller plug( App.Plugs.PreloadObject, [function: &amp;amp;__MODULE__.preload_post/2, as: :post] when action in [:show, :update, :delete] ) plug(App.Plugs.Authorization, for: :post) # ... def preload_post(_conn, %{&quot;id&quot; =&amp;gt; id}), do: Posts.get!(id) В данном случае App.Plugs.PreloadObject использует указанную функцию загрузки и складывает объект авторизации в conn, а затем App.Plugs.Authorization на основе этого объекта и правил авторизации определяет, можно ли выполнять действие. Преимущества такого подхода очевидны: Получаем возможность полноценно определить предикат . Ошибки 404 и 403 теперь чётко разграничены. Теперь о недостатках: Теперь контроллер — не единственная точка работы с данными на пути обработки запроса! Если поменяется код работы (в частности select) с постами — надо будет идти потенциально в два места. Теперь при определении полноценного предиката нет возможности проверить доступность до получения объекта. И хотя это — то, к чему мы осознанно шли, в высоконагруженных системах такое поведение может значительно добавить нагрузки в тех сценариях, когда большая часть запросов может быть отвергнута с использованием . Использование полноценного предиката до отображения объекта авторизации Теоретическая возможность сделать двухэтапную авторизацию для высоконагруженных систем есть: достаточно свести предикат в области к предикату в области , но Это приведёт к поддержке в коде двух предикатов вместо одного. А в действительности это будет поддержка меньших предикатов вместо вместо ). На практике я такого не делал, поэтому про подводные камни рассказать не могу. Определение действия Тут тоже есть свои особенности в реальных системах. Проблема в том, что отображение действия происходит не один раз: сначала внешнее действие отображается на внутреннее на уровне контроллера, потом контроллер отображает это на одно (или несколько) действий модуля бизнес-логики, которые уже отображают свои действия на действия уровня данных или низкоуровневые процедуры (например, печать). И тут встаёт проблема выбора уровня отображаемых действий для авторизации. Типичные библиотеки для описания авторизации (как минимум рельсовые) переносят это на уровень бизнес-логики (а с active record этот слой ещё и смешан со слоем хранения). Я же считаю, что для авторизации нужно использовать отображение как можно более близкое к вводу, потому что Отображение уровня контроллера позволяет делать действия бизнес-логики и работы с данными максимально широкими, что уменьшает количество дублируемого кода и позволяет выстроить достаточно высокоуровневые абстракции. В то же время действия уровня контроллера можно делать максимально узкими для построения минимально-необходимого интерфейса (что уменьшает уровень энтропии интерфейса). Авторизация не будет «ломаться», если одно действие уровня контроллера будет отображатся на несколько действий более низкого уровня. Но в общем и целом, помня про текучие абстрации, можно руководствоваться подходом, при котором предикат будет иметь наименее объёмное определение. В частности иногда есть смысл авторизовать действие на уровне бизнес-логики, а не на уровне контроллера. Обратная авторизация и логически недоступные действия Вот сейчас я буду рассказывать про откровенный костыль, но мне пришлось на это пойти. Кроме авторизации зачастую встаёт вопрос «обратной авторизации» — когда нужно не ответить отказом/успехом на попытку действия, а предоставить список доступных действий. Я использовал такой подход: брал список вообще всех действий и применял к ним предикат с текущими субъектом и объектом. Способ полностью работал. Но проблема была в том, что кнопку нужно было задизейблить не только когда пользователю нельзя чего-то сделать, но и когда действие было логически невозможным. Тут есть два варианта: Составить предикат логически недоступных действий и конънктивно применять его вместе с предикатом авторизации. Учесть логическую невозможность действия в авторизации. Позор мне, я выбрал второй способ. Чреват он двумя выхлопами: Разделить правила логические и политические в определении предиката невозможно. Это очень плохо. Авторизационный предикат разрастается в объёме на k логических условий для каждого из авторизационных (условий): . Заключение Авторизация в простых приложениях — достаточно простой предмет. Основная проблема почти всегда заключается в подходе, а не в теоретической ёмкости проблемы. Но при этом многие (в т.ч. и я зачастую) делают авторизацию в MVC-приложениях исходя исключительно из практики, «как получится», что приводит к проблемам гибкости и корректности.</summary></entry><entry xml:lang="ru"><title type="html">Презентеры для моделей Ecto</title><link href="https://ivalentinee.github.io/ru/programming/2019/04/30/ecto-presenters.html" rel="alternate" type="text/html" title="Презентеры для моделей Ecto" /><published>2019-04-30T00:00:00+00:00</published><updated>2019-04-30T00:00:00+00:00</updated><id>https://ivalentinee.github.io/ru/programming/2019/04/30/ecto-presenters</id><content type="html" xml:base="https://ivalentinee.github.io/ru/programming/2019/04/30/ecto-presenters.html">&lt;h2 id=&quot;предисловие&quot;&gt;Предисловие&lt;/h2&gt;
&lt;p&gt;Продолжение статьи про &lt;a href=&quot;/ru/programming/2018/11/12/alternative-phoenix-contexts-approach.html&quot;&gt;организацию файлов в типичном Phoenix-проекте&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Время идёт, проекты разрастаются, появляются новые подходы. Расскажу про ещё один.&lt;/p&gt;

&lt;p&gt;Перед прочтением рекомендую ознакомиться с &lt;a href=&quot;/ru/programming/2018/11/12/alternative-phoenix-contexts-approach.html&quot;&gt;предыдущим постом&lt;/a&gt; (но это не обязательно).&lt;/p&gt;

&lt;h2 id=&quot;проблема&quot;&gt;Проблема&lt;/h2&gt;
&lt;p&gt;На написание “презентера” меня побудила следующая проблема: в нескольких разных модулях потребовались одни и те же данные. Но не хранимые в БД, а вычисляемые на основе них.&lt;/p&gt;

&lt;p&gt;В качестве примера возьмём два случая:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Какой-нибудь вычисляемый статус. Допустим, все люди, которые больше 1.8 метров высотой, считаются высокими:
    &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tall&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;short&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Переводы. В поставке Phoenix есть библиотека Gettext, поэтому речь примерно про это:
    &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Gettext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dgettext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gettext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;human&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;куда-этот-код-можно-положить&quot;&gt;Куда этот код можно положить&lt;/h2&gt;
&lt;p&gt;Есть два исходных варианта. И один новый.&lt;/p&gt;

&lt;h3 id=&quot;в-модель-в-понимании-ecto&quot;&gt;В модель (в понимании Ecto)&lt;/h3&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# lib/app/models/human.ex&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Human&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Schema&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;humans&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:gender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Не самый плохой вариант. По крайней мере лучше, чем дублировать эти методы.&lt;/p&gt;

&lt;p&gt;Но в результате:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Модель становится “толстой”&lt;/li&gt;
  &lt;li&gt;Модель отвечает не только за хранение данных&lt;/li&gt;
  &lt;li&gt;Повышается связность в проекте, потому что функции моделей используются ещё и в слое отображения (прямое следствие предыдущего пункта)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;в-контекст&quot;&gt;В контекст&lt;/h3&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# lib/app/contexts/humans.ex&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Contexts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Humans&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Тоже не самый плохой вариант. Уже лучше, чем в модель.&lt;/p&gt;

&lt;p&gt;Но все те же проблемы в результате:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Контекст также как и модель становится “толстым”&lt;/li&gt;
  &lt;li&gt;Контекст отвечает не только за операции (изменение/получение) над данными, но и за вывод&lt;/li&gt;
  &lt;li&gt;Повышается связность в проекте, потому что функции контекстов используются ещё и в слое отображения (прямое следствие предыдущего пункта)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;в-презентер&quot;&gt;В презентер&lt;/h3&gt;
&lt;p&gt;Сразу оговорюсь, что, ввиду отсутствия в erlang/elixir ООП “с классами” презентер (или &lt;em&gt;декоратор&lt;/em&gt;) не использует наследование.
Поэтому всё сильно упрощается:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# lib/app/presenters/human.ex&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Presenters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Human&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;И у нас появляется модуль, ответственный за вычисление данных для отображения.&lt;/p&gt;

&lt;p&gt;По привычке называю его “презентер”. И, думаю, это подходящее название.&lt;/p&gt;

&lt;p&gt;Модели и контексты не толстеют, буква &lt;strong&gt;S&lt;/strong&gt; из &lt;a href=&quot;https://ru.wikipedia.org/wiki/SOLID_(%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)&quot;&gt;&lt;strong&gt;SOLID&lt;/strong&gt;‘а&lt;/a&gt; соблюдена.&lt;/p&gt;

&lt;h2 id=&quot;немного-про-ограничения-и-антипаттерны&quot;&gt;Немного про ограничения и антипаттерны&lt;/h2&gt;
&lt;p&gt;Ввиду того, что модуль этот был сделан исключительно для отображения, использование его для других целей будет нарушением принципа &lt;strong&gt;SOLID&lt;/strong&gt; (всё ещё первой буквы).&lt;/p&gt;

&lt;p&gt;Поясняю: если презентер по какой-то причине используется в модели или контексте, значит на основе вычисляемых данных будет совершаться получение и/или изменение в БД. Что делает &lt;strong&gt;операции&lt;/strong&gt; зависимыми от &lt;strong&gt;отображения&lt;/strong&gt;. В результате вместе с SOLID’ом есть высокая вероятность нарушения &lt;strong&gt;принципа наименьшего удивления&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Куда девать код, который относится и к отображению и к операциям и к хранению? Не знаю. Ещё не придумал. Но когда-нибудь напишу ответ и на этот вопрос.&lt;/p&gt;</content><author><name></name></author><summary type="html">Предисловие Продолжение статьи про организацию файлов в типичном Phoenix-проекте. Время идёт, проекты разрастаются, появляются новые подходы. Расскажу про ещё один. Перед прочтением рекомендую ознакомиться с предыдущим постом (но это не обязательно). Проблема На написание “презентера” меня побудила следующая проблема: в нескольких разных модулях потребовались одни и те же данные. Но не хранимые в БД, а вычисляемые на основе них. В качестве примера возьмём два случая: Какой-нибудь вычисляемый статус. Допустим, все люди, которые больше 1.8 метров высотой, считаются высокими: def height_status(human) do if human.height &amp;gt; 180, do: &quot;tall&quot;, else: &quot;short&quot; end Переводы. В поставке Phoenix есть библиотека Gettext, поэтому речь примерно про это: def gender_text(human) do Gettext.dgettext(App.Gettext, &quot;human&quot;, human.gender, []) end Куда этот код можно положить Есть два исходных варианта. И один новый. В модель (в понимании Ecto) # lib/app/models/human.ex defmodule App.Models.Human do use Ecto.Schema schema &quot;humans&quot; do field(:height, :string) field(:gender, :string) end # ... def height_status(human) do # ... def gender_text(human) do # ... end Не самый плохой вариант. По крайней мере лучше, чем дублировать эти методы. Но в результате: Модель становится “толстой” Модель отвечает не только за хранение данных Повышается связность в проекте, потому что функции моделей используются ещё и в слое отображения (прямое следствие предыдущего пункта) В контекст # lib/app/contexts/humans.ex defmodule App.Contexts.Humans do def list() do # ... def get() do # ... def create() do # ... def update() do # ... def delete() do # ... def height_status(human) do # ... def gender_text(human) do # ... end Тоже не самый плохой вариант. Уже лучше, чем в модель. Но все те же проблемы в результате: Контекст также как и модель становится “толстым” Контекст отвечает не только за операции (изменение/получение) над данными, но и за вывод Повышается связность в проекте, потому что функции контекстов используются ещё и в слое отображения (прямое следствие предыдущего пункта) В презентер Сразу оговорюсь, что, ввиду отсутствия в erlang/elixir ООП “с классами” презентер (или декоратор) не использует наследование. Поэтому всё сильно упрощается: # lib/app/presenters/human.ex defmodule App.Presenters.Human do def height_status(human) do # ... def gender_text(human) do # ... end И у нас появляется модуль, ответственный за вычисление данных для отображения. По привычке называю его “презентер”. И, думаю, это подходящее название. Модели и контексты не толстеют, буква S из SOLID‘а соблюдена. Немного про ограничения и антипаттерны Ввиду того, что модуль этот был сделан исключительно для отображения, использование его для других целей будет нарушением принципа SOLID (всё ещё первой буквы). Поясняю: если презентер по какой-то причине используется в модели или контексте, значит на основе вычисляемых данных будет совершаться получение и/или изменение в БД. Что делает операции зависимыми от отображения. В результате вместе с SOLID’ом есть высокая вероятность нарушения принципа наименьшего удивления. Куда девать код, который относится и к отображению и к операциям и к хранению? Не знаю. Ещё не придумал. Но когда-нибудь напишу ответ и на этот вопрос.</summary></entry></feed>